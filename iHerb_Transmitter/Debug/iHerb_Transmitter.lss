
iHerb_Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001686  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000007f  00800100  00800100  000016fa  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000016fa  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000098  00000000  00000000  0000172a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005a2  00000000  00000000  000017c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000186  00000000  00000000  00001d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000055d  00000000  00000000  00001eea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002c8  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00007757  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000005c5  00000000  00000000  00009e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  0000a42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000298f  00000000  00000000  0000a4b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 d9 06 	jmp	0xdb2	; 0xdb2 <__vector_4>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 21 07 	jmp	0xe42	; 0xe42 <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 b3 05 	jmp	0xb66	; 0xb66 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e6 e8       	ldi	r30, 0x86	; 134
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 30       	cpi	r26, 0x00	; 0
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	af 37       	cpi	r26, 0x7F	; 127
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
      9e:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
		myCOM.PreviousDroppedPackets = myCOM.DroppedPackets;
	}
	
	if ( myCOM.RxPackets > myCOM.PreviousRxPackets ) {
		extraCount = eeprom_read_byte(eepromCOM_RX_SUCCESS);
		extraCount += myCOM.RxPackets - myCOM.PreviousRxPackets;
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
      ae:	0e 94 7b 07 	call	0xef6	; 0xef6 <setup>
      b2:	80 91 31 01 	lds	r24, 0x0131
		eeprom_write_byte(eepromCOM_RX_SUCCESS, extraCount);
      b6:	88 2f       	mov	r24, r24
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	82 30       	cpi	r24, 0x02	; 2
      bc:	91 05       	cpc	r25, r1
		myCOM.RxPackets = 0;
      be:	c9 f0       	breq	.+50     	; 0xf2 <main+0x4c>
      c0:	83 30       	cpi	r24, 0x03	; 3
		myCOM.PreviousRxPackets = myCOM.RxPackets;
      c2:	91 05       	cpc	r25, r1
      c4:	34 f4       	brge	.+12     	; 0xd2 <main+0x2c>
      c6:	00 97       	sbiw	r24, 0x00	; 0
      c8:	71 f0       	breq	.+28     	; 0xe6 <main+0x40>
	}
}
      ca:	81 30       	cpi	r24, 0x01	; 1
      cc:	91 05       	cpc	r25, r1
      ce:	71 f0       	breq	.+28     	; 0xec <main+0x46>
      d0:	1a c0       	rjmp	.+52     	; 0x106 <main+0x60>
{
	// Run Setup 
	setup();
	
    while(1) {	// Loop forever 
		switch (mySys.chMode)  {	// Note the case
      d2:	84 30       	cpi	r24, 0x04	; 4
      d4:	91 05       	cpc	r25, r1
      d6:	99 f0       	breq	.+38     	; 0xfe <main+0x58>
      d8:	84 30       	cpi	r24, 0x04	; 4
      da:	91 05       	cpc	r25, r1
      dc:	6c f0       	brlt	.+26     	; 0xf8 <main+0x52>
      de:	85 30       	cpi	r24, 0x05	; 5
      e0:	91 05       	cpc	r25, r1
      e2:	81 f0       	breq	.+32     	; 0x104 <main+0x5e>
			case SYSTEM_MODE_DATA_WAIT:	// On the Programmer Idle mode....
				//PORTC &= ~(0x04);
				// Start waiting for a Transmission packet
			break;
			default:
			break;
      e4:	10 c0       	rjmp	.+32     	; 0x106 <main+0x60>
		switch (mySys.chMode)  {	// Note the case
			case SYSTEM_MODE_PROCESS:	// On the Divert Idle mode....
				// Process a packet as soon as it is received
				//USART_SendByte(0x0F);
				//PORTC |= 0x01;	// YELLOW
				fcnProcessPacket();
      e6:	0e 94 4b 03 	call	0x696	; 0x696 <fcnProcessPacket>
			break;
      ea:	0d c0       	rjmp	.+26     	; 0x106 <main+0x60>
			case SYSTEM_MODE_DIVERT:	// Perform Divert Sequence
				//PORTC &= ~(0x01);
				fcnSendDivertData();
      ec:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <fcnSendDivertData>
			break;
      f0:	0a c0       	rjmp	.+20     	; 0x106 <main+0x60>
			case SYSTEM_MODE_PHOTOEYE:	// Waiting on Photoeye
				//PORTC |= 0x04;	// GREEN
				fcnWaitForPhotoeye();
      f2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <fcnWaitForPhotoeye>
			break;
      f6:	07 c0       	rjmp	.+14     	; 0x106 <main+0x60>
			case SYSTEM_MODE_PROGRAM:	// Start and Keep Transmitting Parameters
				//PORTC &= ~(0x01);
				//PORTC |= 0x04;	// GREEN
				fcnSendParameters();
      f8:	0e 94 97 01 	call	0x32e	; 0x32e <fcnSendParameters>
			break;
      fc:	04 c0       	rjmp	.+8      	; 0x106 <main+0x60>
			case SYSTEM_MODE_DEBUG:	// Enter Debug Mode
				//PORTC &= ~(0x01);
				//PORTC |= 0x04;	// GREEN
				fcnRunDebugMode();
      fe:	0e 94 84 00 	call	0x108	; 0x108 <fcnRunDebugMode>
			break;
     102:	01 c0       	rjmp	.+2      	; 0x106 <main+0x60>
			case SYSTEM_MODE_DATA_WAIT:	// On the Programmer Idle mode....
				//PORTC &= ~(0x04);
				// Start waiting for a Transmission packet
			break;
     104:	00 00       	nop
			default:
			break;
		}
    }
     106:	d5 cf       	rjmp	.-86     	; 0xb2 <main+0xc>

00000108 <fcnRunDebugMode>:
}

const uint32_t DebugDelay = 0x0002BF20;	// 3 Minutes in 
uint16_t DebugCommand;
void fcnRunDebugMode(void) {
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	// Run the same command for about 3 minutes
	UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
     110:	81 ec       	ldi	r24, 0xC1	; 193
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	28 e8       	ldi	r18, 0x88	; 136
     116:	fc 01       	movw	r30, r24
     118:	20 83       	st	Z, r18
	
	if ( mySys.devAddress == 0 ) {
     11a:	80 91 2f 01 	lds	r24, 0x012F
     11e:	88 23       	and	r24, r24
     120:	09 f0       	breq	.+2      	; 0x124 <fcnRunDebugMode+0x1c>
     122:	c0 c0       	rjmp	.+384    	; 0x2a4 <fcnRunDebugMode+0x19c>
		DebugCommand = myCOM.PacketData[2];
     124:	80 91 09 01 	lds	r24, 0x0109
     128:	88 2f       	mov	r24, r24
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	90 93 3e 01 	sts	0x013E, r25
     130:	80 93 3d 01 	sts	0x013D, r24
		//DebugCommand = 0x87;
		mySys.clkCount = 0;
     134:	10 92 32 01 	sts	0x0132, r1
     138:	10 92 33 01 	sts	0x0133, r1
     13c:	10 92 34 01 	sts	0x0134, r1
     140:	10 92 35 01 	sts	0x0135, r1
		myDivert.ByteDelay = mySys.clkCount;
     144:	80 91 32 01 	lds	r24, 0x0132
     148:	90 91 33 01 	lds	r25, 0x0133
     14c:	a0 91 34 01 	lds	r26, 0x0134
     150:	b0 91 35 01 	lds	r27, 0x0135
     154:	80 93 73 01 	sts	0x0173, r24
     158:	90 93 74 01 	sts	0x0174, r25
     15c:	a0 93 75 01 	sts	0x0175, r26
     160:	b0 93 76 01 	sts	0x0176, r27
		myDivert.IsToGo = 0xFF;
     164:	8f ef       	ldi	r24, 0xFF	; 255
     166:	80 93 6c 01 	sts	0x016C, r24
		
		while ( !(mySys.clkCount > DebugDelay) )
     16a:	8a c0       	rjmp	.+276    	; 0x280 <fcnRunDebugMode+0x178>
		{
			// Check if Byte separator has been satisfied
			if ( mySys.clkCount > ( uint32_t ) ( myDivert.ByteDelay + durationBYTE_DELAY ) ) {
     16c:	20 91 32 01 	lds	r18, 0x0132
     170:	30 91 33 01 	lds	r19, 0x0133
     174:	40 91 34 01 	lds	r20, 0x0134
     178:	50 91 35 01 	lds	r21, 0x0135
     17c:	80 91 73 01 	lds	r24, 0x0173
     180:	90 91 74 01 	lds	r25, 0x0174
     184:	a0 91 75 01 	lds	r26, 0x0175
     188:	b0 91 76 01 	lds	r27, 0x0176
     18c:	02 96       	adiw	r24, 0x02	; 2
     18e:	a1 1d       	adc	r26, r1
     190:	b1 1d       	adc	r27, r1
     192:	82 17       	cp	r24, r18
     194:	93 07       	cpc	r25, r19
     196:	a4 07       	cpc	r26, r20
     198:	b5 07       	cpc	r27, r21
     19a:	98 f4       	brcc	.+38     	; 0x1c2 <fcnRunDebugMode+0xba>
				myDivert.IsToGo = 0xFF;
     19c:	8f ef       	ldi	r24, 0xFF	; 255
     19e:	80 93 6c 01 	sts	0x016C, r24
				myDivert.ByteDelay = mySys.clkCount;
     1a2:	80 91 32 01 	lds	r24, 0x0132
     1a6:	90 91 33 01 	lds	r25, 0x0133
     1aa:	a0 91 34 01 	lds	r26, 0x0134
     1ae:	b0 91 35 01 	lds	r27, 0x0135
     1b2:	80 93 73 01 	sts	0x0173, r24
     1b6:	90 93 74 01 	sts	0x0174, r25
     1ba:	a0 93 75 01 	sts	0x0175, r26
     1be:	b0 93 76 01 	sts	0x0176, r27
			}
			
			if ( myDivert.irPacketLength > 2 ) {
     1c2:	80 91 6d 01 	lds	r24, 0x016D
     1c6:	83 30       	cpi	r24, 0x03	; 3
     1c8:	90 f1       	brcs	.+100    	; 0x22e <fcnRunDebugMode+0x126>
				// Since for now, we know that no bytes should be sent, disable
				myDivert.irSendPacket = 0x00;
     1ca:	10 92 6e 01 	sts	0x016E, r1
				
				if ( mySys.clkCount > ( uint32_t ) ( myDivert.irPacketDelay + delayIR_PACKET ) ) {
     1ce:	20 91 32 01 	lds	r18, 0x0132
     1d2:	30 91 33 01 	lds	r19, 0x0133
     1d6:	40 91 34 01 	lds	r20, 0x0134
     1da:	50 91 35 01 	lds	r21, 0x0135
     1de:	80 91 77 01 	lds	r24, 0x0177
     1e2:	90 91 78 01 	lds	r25, 0x0178
     1e6:	a0 91 79 01 	lds	r26, 0x0179
     1ea:	b0 91 7a 01 	lds	r27, 0x017A
     1ee:	0f 96       	adiw	r24, 0x0f	; 15
     1f0:	a1 1d       	adc	r26, r1
     1f2:	b1 1d       	adc	r27, r1
     1f4:	82 17       	cp	r24, r18
     1f6:	93 07       	cpc	r25, r19
     1f8:	a4 07       	cpc	r26, r20
     1fa:	b5 07       	cpc	r27, r21
     1fc:	c0 f4       	brcc	.+48     	; 0x22e <fcnRunDebugMode+0x126>
					myDivert.irSendPacket = 0xFF;
     1fe:	8f ef       	ldi	r24, 0xFF	; 255
     200:	80 93 6e 01 	sts	0x016E, r24
					myDivert.irPacketLength = 0;
     204:	10 92 6d 01 	sts	0x016D, r1
					
					//mySys.clkCount = 0;
					myDivert.ByteDelay = mySys.clkCount;
     208:	80 91 32 01 	lds	r24, 0x0132
     20c:	90 91 33 01 	lds	r25, 0x0133
     210:	a0 91 34 01 	lds	r26, 0x0134
     214:	b0 91 35 01 	lds	r27, 0x0135
     218:	80 93 73 01 	sts	0x0173, r24
     21c:	90 93 74 01 	sts	0x0174, r25
     220:	a0 93 75 01 	sts	0x0175, r26
     224:	b0 93 76 01 	sts	0x0176, r27
					myDivert.IsToGo = 0xFF;
     228:	8f ef       	ldi	r24, 0xFF	; 255
     22a:	80 93 6c 01 	sts	0x016C, r24
				}
			}
			
			// Send the necessary data by stages
			if ( myDivert.IsToGo && myDivert.irSendPacket ) {
     22e:	80 91 6c 01 	lds	r24, 0x016C
     232:	88 23       	and	r24, r24
     234:	29 f1       	breq	.+74     	; 0x280 <fcnRunDebugMode+0x178>
     236:	80 91 6e 01 	lds	r24, 0x016E
     23a:	88 23       	and	r24, r24
     23c:	09 f1       	breq	.+66     	; 0x280 <fcnRunDebugMode+0x178>
				myDivert.IsToGo = 0x00;
     23e:	10 92 6c 01 	sts	0x016C, r1
				
				// Check correct command based on time
				USART_SendByte( DebugCommand );
     242:	80 91 3d 01 	lds	r24, 0x013D
     246:	90 91 3e 01 	lds	r25, 0x013E
     24a:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
				//eeprom_write_byte(eepromCOM_TX_RAW + myDivert.j, myDivert.command);
				
				myDivert.irPacketLength++;
     24e:	80 91 6d 01 	lds	r24, 0x016D
     252:	8f 5f       	subi	r24, 0xFF	; 255
     254:	80 93 6d 01 	sts	0x016D, r24
				if ( myDivert.irPacketLength == 3 ) {
     258:	80 91 6d 01 	lds	r24, 0x016D
     25c:	83 30       	cpi	r24, 0x03	; 3
     25e:	81 f4       	brne	.+32     	; 0x280 <fcnRunDebugMode+0x178>
					myDivert.irPacketDelay = mySys.clkCount;
     260:	80 91 32 01 	lds	r24, 0x0132
     264:	90 91 33 01 	lds	r25, 0x0133
     268:	a0 91 34 01 	lds	r26, 0x0134
     26c:	b0 91 35 01 	lds	r27, 0x0135
     270:	80 93 77 01 	sts	0x0177, r24
     274:	90 93 78 01 	sts	0x0178, r25
     278:	a0 93 79 01 	sts	0x0179, r26
     27c:	b0 93 7a 01 	sts	0x017A, r27
		//DebugCommand = 0x87;
		mySys.clkCount = 0;
		myDivert.ByteDelay = mySys.clkCount;
		myDivert.IsToGo = 0xFF;
		
		while ( !(mySys.clkCount > DebugDelay) )
     280:	20 91 32 01 	lds	r18, 0x0132
     284:	30 91 33 01 	lds	r19, 0x0133
     288:	40 91 34 01 	lds	r20, 0x0134
     28c:	50 91 35 01 	lds	r21, 0x0135
     290:	80 e2       	ldi	r24, 0x20	; 32
     292:	9f eb       	ldi	r25, 0xBF	; 191
     294:	a2 e0       	ldi	r26, 0x02	; 2
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	82 17       	cp	r24, r18
     29a:	93 07       	cpc	r25, r19
     29c:	a4 07       	cpc	r26, r20
     29e:	b5 07       	cpc	r27, r21
     2a0:	08 f0       	brcs	.+2      	; 0x2a4 <fcnRunDebugMode+0x19c>
     2a2:	64 cf       	rjmp	.-312    	; 0x16c <fcnRunDebugMode+0x64>
			
			
		}
	}
	
	mySys.clkCount = 0;
     2a4:	10 92 32 01 	sts	0x0132, r1
     2a8:	10 92 33 01 	sts	0x0133, r1
     2ac:	10 92 34 01 	sts	0x0134, r1
     2b0:	10 92 35 01 	sts	0x0135, r1
	
	usartCleanPacket();
     2b4:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
	mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	80 93 31 01 	sts	0x0131, r24
	UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     2be:	81 ec       	ldi	r24, 0xC1	; 193
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	28 e9       	ldi	r18, 0x98	; 152
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
}
     2c8:	df 91       	pop	r29
     2ca:	cf 91       	pop	r28
     2cc:	08 95       	ret

000002ce <fcnInSeriesByteDelay>:

void fcnInSeriesByteDelay( void ) {
     2ce:	cf 93       	push	r28
     2d0:	df 93       	push	r29
     2d2:	cd b7       	in	r28, 0x3d	; 61
     2d4:	de b7       	in	r29, 0x3e	; 62
	// Keep in loop if delay is needed
	while ( !( mySys.clkCount > ( uint32_t ) ( myDivert.ByteDelay + durationBYTE_DELAY ) ) ) {
     2d6:	00 00       	nop
     2d8:	20 91 32 01 	lds	r18, 0x0132
     2dc:	30 91 33 01 	lds	r19, 0x0133
     2e0:	40 91 34 01 	lds	r20, 0x0134
     2e4:	50 91 35 01 	lds	r21, 0x0135
     2e8:	80 91 73 01 	lds	r24, 0x0173
     2ec:	90 91 74 01 	lds	r25, 0x0174
     2f0:	a0 91 75 01 	lds	r26, 0x0175
     2f4:	b0 91 76 01 	lds	r27, 0x0176
     2f8:	02 96       	adiw	r24, 0x02	; 2
     2fa:	a1 1d       	adc	r26, r1
     2fc:	b1 1d       	adc	r27, r1
     2fe:	82 17       	cp	r24, r18
     300:	93 07       	cpc	r25, r19
     302:	a4 07       	cpc	r26, r20
     304:	b5 07       	cpc	r27, r21
     306:	40 f7       	brcc	.-48     	; 0x2d8 <fcnInSeriesByteDelay+0xa>
	}
	myDivert.ByteDelay = mySys.clkCount;
     308:	80 91 32 01 	lds	r24, 0x0132
     30c:	90 91 33 01 	lds	r25, 0x0133
     310:	a0 91 34 01 	lds	r26, 0x0134
     314:	b0 91 35 01 	lds	r27, 0x0135
     318:	80 93 73 01 	sts	0x0173, r24
     31c:	90 93 74 01 	sts	0x0174, r25
     320:	a0 93 75 01 	sts	0x0175, r26
     324:	b0 93 76 01 	sts	0x0176, r27
}
     328:	df 91       	pop	r29
     32a:	cf 91       	pop	r28
     32c:	08 95       	ret

0000032e <fcnSendParameters>:

void fcnSendParameters( void ) {
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	cd b7       	in	r28, 0x3d	; 61
     334:	de b7       	in	r29, 0x3e	; 62
	
	
	
		// Send Character
	USART_SendByte( myCOM.ConveyorSpeed );
     336:	80 91 25 01 	lds	r24, 0x0125
     33a:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
		// Delay transmission	
	fcnInSeriesByteDelay();
     33e:	0e 94 67 01 	call	0x2ce	; 0x2ce <fcnInSeriesByteDelay>
		// Send Character
	USART_SendByte( myCOM.ConveyorSpeed );
     342:	80 91 25 01 	lds	r24, 0x0125
     346:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
		// Delay transmission
	fcnInSeriesByteDelay();
     34a:	0e 94 67 01 	call	0x2ce	; 0x2ce <fcnInSeriesByteDelay>
		// Send Character
	USART_SendByte( myCOM.RURD );
     34e:	80 91 26 01 	lds	r24, 0x0126
     352:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
		// Delay transmission
	fcnInSeriesByteDelay();
     356:	0e 94 67 01 	call	0x2ce	; 0x2ce <fcnInSeriesByteDelay>
		// Send Character
	USART_SendByte( myCOM.RURD );
     35a:	80 91 26 01 	lds	r24, 0x0126
     35e:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
		// Delay transmission
	fcnInSeriesByteDelay();
     362:	0e 94 67 01 	call	0x2ce	; 0x2ce <fcnInSeriesByteDelay>
		// Send Character
	USART_SendByte( myCOM.DivertDelay );
     366:	80 91 27 01 	lds	r24, 0x0127
     36a:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
		// Delay transmission
	fcnInSeriesByteDelay();
     36e:	0e 94 67 01 	call	0x2ce	; 0x2ce <fcnInSeriesByteDelay>
		// Send Character
	USART_SendByte( myCOM.DivertDelay );
     372:	80 91 27 01 	lds	r24, 0x0127
     376:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
		// Delay transmission
	fcnInSeriesByteDelay();
     37a:	0e 94 67 01 	call	0x2ce	; 0x2ce <fcnInSeriesByteDelay>
	
	// Check for end of transmission
	if ( mySys.clkCount > myDivert.ProgrammingDuration ) {
     37e:	20 91 32 01 	lds	r18, 0x0132
     382:	30 91 33 01 	lds	r19, 0x0133
     386:	40 91 34 01 	lds	r20, 0x0134
     38a:	50 91 35 01 	lds	r21, 0x0135
     38e:	80 91 6f 01 	lds	r24, 0x016F
     392:	90 91 70 01 	lds	r25, 0x0170
     396:	a0 91 71 01 	lds	r26, 0x0171
     39a:	b0 91 72 01 	lds	r27, 0x0172
     39e:	82 17       	cp	r24, r18
     3a0:	93 07       	cpc	r25, r19
     3a2:	a4 07       	cpc	r26, r20
     3a4:	b5 07       	cpc	r27, r21
     3a6:	48 f4       	brcc	.+18     	; 0x3ba <fcnSendParameters+0x8c>
		usartCleanPacket();
     3a8:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
		mySys.chMode = SYSTEM_MODE_PROCESS;	//	Finish Transmission and go back to idling
     3ac:	10 92 31 01 	sts	0x0131, r1
		UCSR0B = 0b10011000;	// Rx Enabled. Rx Interrupt Enabled
     3b0:	81 ec       	ldi	r24, 0xC1	; 193
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	28 e9       	ldi	r18, 0x98	; 152
     3b6:	fc 01       	movw	r30, r24
     3b8:	20 83       	st	Z, r18
	}
}
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	08 95       	ret

000003c0 <fcnWaitForPhotoeye>:

void fcnWaitForPhotoeye( void ) {
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
	
	
	// Trigger Debug
	//eeprom_write_byte(eepromCOM_RX_CORRUPT, 0xEE);
	//if ( ( uint16_t ) mySys.clkCount > mySys.PhotoeyeDelayWindow - 1 ) {
	myDivert.PhotoeyeTripped = 0xFF;	// Reset the Photoeye trip
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	80 93 7d 01 	sts	0x017D, r24
	//}
	
	// Release the Divert if Photoeye was tripped
	if ( myDivert.PhotoeyeTripped ) {
     3ce:	80 91 7d 01 	lds	r24, 0x017D
     3d2:	88 23       	and	r24, r24
     3d4:	41 f1       	breq	.+80     	; 0x426 <fcnWaitForPhotoeye+0x66>
		mySys.chMode = SYSTEM_MODE_DIVERT;	
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	80 93 31 01 	sts	0x0131, r24
		myDivert.PhotoeyeTripped = 0x00;	// Reset the Photoeye trip
     3dc:	10 92 7d 01 	sts	0x017D, r1
		
		myDivert.i = myCOM.PacketData[3] - 1;	// Populate i
     3e0:	80 91 0a 01 	lds	r24, 0x010A
     3e4:	81 50       	subi	r24, 0x01	; 1
     3e6:	80 93 6a 01 	sts	0x016A, r24
		myDivert.j = 0;
     3ea:	10 92 6b 01 	sts	0x016B, r1
		//myDivert.command = myDivert.tblDivertData[ ( ( ( myDivert.i * ( myDivert.i + 1 ) ) / 2 ) + myDivert.j ) ];
		mySys.clkCount = 0;
     3ee:	10 92 32 01 	sts	0x0132, r1
     3f2:	10 92 33 01 	sts	0x0133, r1
     3f6:	10 92 34 01 	sts	0x0134, r1
     3fa:	10 92 35 01 	sts	0x0135, r1
		myDivert.ByteDelay = mySys.clkCount;
     3fe:	80 91 32 01 	lds	r24, 0x0132
     402:	90 91 33 01 	lds	r25, 0x0133
     406:	a0 91 34 01 	lds	r26, 0x0134
     40a:	b0 91 35 01 	lds	r27, 0x0135
     40e:	80 93 73 01 	sts	0x0173, r24
     412:	90 93 74 01 	sts	0x0174, r25
     416:	a0 93 75 01 	sts	0x0175, r26
     41a:	b0 93 76 01 	sts	0x0176, r27
		myDivert.IsToGo = 0xFF;	// Is to transmit right away
     41e:	8f ef       	ldi	r24, 0xFF	; 255
     420:	80 93 6c 01 	sts	0x016C, r24
     424:	1a c0       	rjmp	.+52     	; 0x45a <fcnWaitForPhotoeye+0x9a>
	} else {
		// Check for timeout condition
		if ( ( uint16_t ) mySys.clkCount > mySys.PhotoeyeDelayWindow ) {
     426:	80 91 32 01 	lds	r24, 0x0132
     42a:	90 91 33 01 	lds	r25, 0x0133
     42e:	a0 91 34 01 	lds	r26, 0x0134
     432:	b0 91 35 01 	lds	r27, 0x0135
     436:	9c 01       	movw	r18, r24
     438:	80 91 3a 01 	lds	r24, 0x013A
     43c:	90 91 3b 01 	lds	r25, 0x013B
     440:	82 17       	cp	r24, r18
     442:	93 07       	cpc	r25, r19
     444:	50 f4       	brcc	.+20     	; 0x45a <fcnWaitForPhotoeye+0x9a>
			usartCleanPacket();
     446:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
			mySys.chMode = SYSTEM_MODE_DATA_WAIT;	//	Finish Transmission and go back to idling
     44a:	85 e0       	ldi	r24, 0x05	; 5
     44c:	80 93 31 01 	sts	0x0131, r24
			UCSR0B = 0b10011000;	// Rx Enabled. Rx Interrupt Enabled
     450:	81 ec       	ldi	r24, 0xC1	; 193
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	28 e9       	ldi	r18, 0x98	; 152
     456:	fc 01       	movw	r30, r24
     458:	20 83       	st	Z, r18
		}
	}
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <fcnSelectCommandByte>:
//////////////////////////////////////////////////////////////////////////
//	Serial Input Function:
//		This function will allow for timeout if a byte does is not
//		received in the allotted time
//////////////////////////////////////////////////////////////////////////
void fcnSelectCommandByte( void ) {
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
	if ( mySys.clkCount == myDivert.SlatTravelTimes[myDivert.i] ) {
     468:	20 91 32 01 	lds	r18, 0x0132
     46c:	30 91 33 01 	lds	r19, 0x0133
     470:	40 91 34 01 	lds	r20, 0x0134
     474:	50 91 35 01 	lds	r21, 0x0135
     478:	80 91 6a 01 	lds	r24, 0x016A
     47c:	88 2f       	mov	r24, r24
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	84 5a       	subi	r24, 0xA4	; 164
     486:	9e 4f       	sbci	r25, 0xFE	; 254
     488:	fc 01       	movw	r30, r24
     48a:	80 81       	ld	r24, Z
     48c:	91 81       	ldd	r25, Z+1	; 0x01
     48e:	cc 01       	movw	r24, r24
     490:	a0 e0       	ldi	r26, 0x00	; 0
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	28 17       	cp	r18, r24
     496:	39 07       	cpc	r19, r25
     498:	4a 07       	cpc	r20, r26
     49a:	5b 07       	cpc	r21, r27
     49c:	59 f4       	brne	.+22     	; 0x4b4 <fcnSelectCommandByte+0x54>
		usartCleanPacket();
     49e:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
		mySys.chMode = SYSTEM_MODE_DATA_WAIT;	//	Finish Transmission and go back to idling
     4a2:	85 e0       	ldi	r24, 0x05	; 5
     4a4:	80 93 31 01 	sts	0x0131, r24
		UCSR0B = 0b10011000;	// Rx Enabled. Rx Interrupt Enabled
     4a8:	81 ec       	ldi	r24, 0xC1	; 193
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	28 e9       	ldi	r18, 0x98	; 152
     4ae:	fc 01       	movw	r30, r24
     4b0:	20 83       	st	Z, r18
     4b2:	75 c0       	rjmp	.+234    	; 0x59e <fcnSelectCommandByte+0x13e>
	} else {
		if ( mySys.clkCount < 1 ) {	// j = 0
     4b4:	80 91 32 01 	lds	r24, 0x0132
     4b8:	90 91 33 01 	lds	r25, 0x0133
     4bc:	a0 91 34 01 	lds	r26, 0x0134
     4c0:	b0 91 35 01 	lds	r27, 0x0135
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	a1 05       	cpc	r26, r1
     4c8:	b1 05       	cpc	r27, r1
     4ca:	f1 f4       	brne	.+60     	; 0x508 <fcnSelectCommandByte+0xa8>
			myDivert.command = myDivert.tblDivertData[ ( ( ( myDivert.i * ( myDivert.i + 1 ) ) / 2 ) + 0 ) ];	 // First Slat
     4cc:	80 91 6a 01 	lds	r24, 0x016A
     4d0:	48 2f       	mov	r20, r24
     4d2:	50 e0       	ldi	r21, 0x00	; 0
     4d4:	80 91 6a 01 	lds	r24, 0x016A
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	9c 01       	movw	r18, r24
     4de:	2f 5f       	subi	r18, 0xFF	; 255
     4e0:	3f 4f       	sbci	r19, 0xFF	; 255
     4e2:	42 9f       	mul	r20, r18
     4e4:	c0 01       	movw	r24, r0
     4e6:	43 9f       	mul	r20, r19
     4e8:	90 0d       	add	r25, r0
     4ea:	52 9f       	mul	r21, r18
     4ec:	90 0d       	add	r25, r0
     4ee:	11 24       	eor	r1, r1
     4f0:	99 23       	and	r25, r25
     4f2:	0c f4       	brge	.+2      	; 0x4f6 <fcnSelectCommandByte+0x96>
     4f4:	01 96       	adiw	r24, 0x01	; 1
     4f6:	95 95       	asr	r25
     4f8:	87 95       	ror	r24
     4fa:	81 5c       	subi	r24, 0xC1	; 193
     4fc:	9e 4f       	sbci	r25, 0xFE	; 254
     4fe:	fc 01       	movw	r30, r24
     500:	80 81       	ld	r24, Z
     502:	80 93 5b 01 	sts	0x015B, r24
     506:	44 c0       	rjmp	.+136    	; 0x590 <fcnSelectCommandByte+0x130>
		} else if ( mySys.clkCount == ( uint32_t ) myDivert.SlatTravelTimes[myDivert.j] ) {	
     508:	20 91 32 01 	lds	r18, 0x0132
     50c:	30 91 33 01 	lds	r19, 0x0133
     510:	40 91 34 01 	lds	r20, 0x0134
     514:	50 91 35 01 	lds	r21, 0x0135
     518:	80 91 6b 01 	lds	r24, 0x016B
     51c:	88 2f       	mov	r24, r24
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	84 5a       	subi	r24, 0xA4	; 164
     526:	9e 4f       	sbci	r25, 0xFE	; 254
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
     52c:	91 81       	ldd	r25, Z+1	; 0x01
     52e:	cc 01       	movw	r24, r24
     530:	a0 e0       	ldi	r26, 0x00	; 0
     532:	b0 e0       	ldi	r27, 0x00	; 0
     534:	28 17       	cp	r18, r24
     536:	39 07       	cpc	r19, r25
     538:	4a 07       	cpc	r20, r26
     53a:	5b 07       	cpc	r21, r27
     53c:	49 f5       	brne	.+82     	; 0x590 <fcnSelectCommandByte+0x130>
			myDivert.j++;
     53e:	80 91 6b 01 	lds	r24, 0x016B
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	80 93 6b 01 	sts	0x016B, r24
			myDivert.command = myDivert.tblDivertData[ ( ( ( myDivert.i * ( myDivert.i + 1 ) ) / 2 ) + myDivert.j ) ];	 // Remaining Slats
     548:	80 91 6a 01 	lds	r24, 0x016A
     54c:	48 2f       	mov	r20, r24
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	80 91 6a 01 	lds	r24, 0x016A
     554:	88 2f       	mov	r24, r24
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	9c 01       	movw	r18, r24
     55a:	2f 5f       	subi	r18, 0xFF	; 255
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
     55e:	42 9f       	mul	r20, r18
     560:	c0 01       	movw	r24, r0
     562:	43 9f       	mul	r20, r19
     564:	90 0d       	add	r25, r0
     566:	52 9f       	mul	r21, r18
     568:	90 0d       	add	r25, r0
     56a:	11 24       	eor	r1, r1
     56c:	99 23       	and	r25, r25
     56e:	0c f4       	brge	.+2      	; 0x572 <fcnSelectCommandByte+0x112>
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	95 95       	asr	r25
     574:	87 95       	ror	r24
     576:	9c 01       	movw	r18, r24
     578:	80 91 6b 01 	lds	r24, 0x016B
     57c:	88 2f       	mov	r24, r24
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	82 0f       	add	r24, r18
     582:	93 1f       	adc	r25, r19
     584:	81 5c       	subi	r24, 0xC1	; 193
     586:	9e 4f       	sbci	r25, 0xFE	; 254
     588:	fc 01       	movw	r30, r24
     58a:	80 81       	ld	r24, Z
     58c:	80 93 5b 01 	sts	0x015B, r24
		} 
		
		myDivert.command |= myDivert.DivertDirection;
     590:	90 91 5b 01 	lds	r25, 0x015B
     594:	80 91 7e 01 	lds	r24, 0x017E
     598:	89 2b       	or	r24, r25
     59a:	80 93 5b 01 	sts	0x015B, r24
	}
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <fcnSendDivertData>:
//////////////////////////////////////////////////////////////////////////
//	Serial Input Function:
//		This function will allow for timeout if a byte does is not
//		received in the allotted time
//////////////////////////////////////////////////////////////////////////
void fcnSendDivertData( void ) {
     5a4:	cf 93       	push	r28
     5a6:	df 93       	push	r29
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
	// Perform only if Divert is on Divert Mode
	if ( mySys.chMode == SYSTEM_MODE_DIVERT ) {
     5ac:	80 91 31 01 	lds	r24, 0x0131
     5b0:	81 30       	cpi	r24, 0x01	; 1
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <fcnSendDivertData+0x12>
     5b4:	6d c0       	rjmp	.+218    	; 0x690 <fcnSendDivertData+0xec>
		
		// Check if Byte separator has been satisfied
		if ( mySys.clkCount > ( uint32_t ) ( myDivert.ByteDelay + durationBYTE_DELAY ) ) {
     5b6:	20 91 32 01 	lds	r18, 0x0132
     5ba:	30 91 33 01 	lds	r19, 0x0133
     5be:	40 91 34 01 	lds	r20, 0x0134
     5c2:	50 91 35 01 	lds	r21, 0x0135
     5c6:	80 91 73 01 	lds	r24, 0x0173
     5ca:	90 91 74 01 	lds	r25, 0x0174
     5ce:	a0 91 75 01 	lds	r26, 0x0175
     5d2:	b0 91 76 01 	lds	r27, 0x0176
     5d6:	02 96       	adiw	r24, 0x02	; 2
     5d8:	a1 1d       	adc	r26, r1
     5da:	b1 1d       	adc	r27, r1
     5dc:	82 17       	cp	r24, r18
     5de:	93 07       	cpc	r25, r19
     5e0:	a4 07       	cpc	r26, r20
     5e2:	b5 07       	cpc	r27, r21
     5e4:	98 f4       	brcc	.+38     	; 0x60c <fcnSendDivertData+0x68>
			myDivert.IsToGo = 0xFF;
     5e6:	8f ef       	ldi	r24, 0xFF	; 255
     5e8:	80 93 6c 01 	sts	0x016C, r24
			myDivert.ByteDelay = mySys.clkCount;
     5ec:	80 91 32 01 	lds	r24, 0x0132
     5f0:	90 91 33 01 	lds	r25, 0x0133
     5f4:	a0 91 34 01 	lds	r26, 0x0134
     5f8:	b0 91 35 01 	lds	r27, 0x0135
     5fc:	80 93 73 01 	sts	0x0173, r24
     600:	90 93 74 01 	sts	0x0174, r25
     604:	a0 93 75 01 	sts	0x0175, r26
     608:	b0 93 76 01 	sts	0x0176, r27
		}
		
		// Send the necessary data by stages
		if ( myDivert.IsToGo ) {
     60c:	80 91 6c 01 	lds	r24, 0x016C
     610:	88 23       	and	r24, r24
     612:	41 f0       	breq	.+16     	; 0x624 <fcnSendDivertData+0x80>
			myDivert.IsToGo = 0x00;
     614:	10 92 6c 01 	sts	0x016C, r1
			
			// Check correct command based on time
			fcnSelectCommandByte();
     618:	0e 94 30 02 	call	0x460	; 0x460 <fcnSelectCommandByte>
			USART_SendByte(myDivert.command);
     61c:	80 91 5b 01 	lds	r24, 0x015B
     620:	0e 94 99 05 	call	0xb32	; 0xb32 <USART_SendByte>
			//eeprom_write_byte(eepromCOM_TX_RAW + myDivert.j, myDivert.command);
			
			
		}
		
		if ( !(mySys.clkCount < myDivert.SlatTravelTimes[0] * myCOM.PacketData[3]) ) {
     624:	20 91 32 01 	lds	r18, 0x0132
     628:	30 91 33 01 	lds	r19, 0x0133
     62c:	40 91 34 01 	lds	r20, 0x0134
     630:	50 91 35 01 	lds	r21, 0x0135
     634:	e0 91 5c 01 	lds	r30, 0x015C
     638:	f0 91 5d 01 	lds	r31, 0x015D
     63c:	80 91 0a 01 	lds	r24, 0x010A
     640:	68 2f       	mov	r22, r24
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	e6 9f       	mul	r30, r22
     646:	c0 01       	movw	r24, r0
     648:	e7 9f       	mul	r30, r23
     64a:	90 0d       	add	r25, r0
     64c:	f6 9f       	mul	r31, r22
     64e:	90 0d       	add	r25, r0
     650:	11 24       	eor	r1, r1
     652:	cc 01       	movw	r24, r24
     654:	a0 e0       	ldi	r26, 0x00	; 0
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	28 17       	cp	r18, r24
     65a:	39 07       	cpc	r19, r25
     65c:	4a 07       	cpc	r20, r26
     65e:	5b 07       	cpc	r21, r27
     660:	b8 f0       	brcs	.+46     	; 0x690 <fcnSendDivertData+0xec>
			
			// End of action, reset everything
			mySys.clkCount = 0;
     662:	10 92 32 01 	sts	0x0132, r1
     666:	10 92 33 01 	sts	0x0133, r1
     66a:	10 92 34 01 	sts	0x0134, r1
     66e:	10 92 35 01 	sts	0x0135, r1
			usartCleanPacket();
     672:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
			mySys.chMode = SYSTEM_MODE_DATA_WAIT;	//	Finish Transmission and go back to idling
     676:	85 e0       	ldi	r24, 0x05	; 5
     678:	80 93 31 01 	sts	0x0131, r24
			UCSR0C = 0b00110110;
     67c:	82 ec       	ldi	r24, 0xC2	; 194
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	26 e3       	ldi	r18, 0x36	; 54
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
			UCSR0B = 0b10011000;	// Tx/Rx Enabled. Rx Interrupt Enabled
     686:	81 ec       	ldi	r24, 0xC1	; 193
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	28 e9       	ldi	r18, 0x98	; 152
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
		}
	}
}
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <fcnProcessPacket>:
//////////////////////////////////////////////////////////////////////////
//	Serial Input Function:
//		This function will allow for timeout if a byte does is not
//		received in the allotted time
//////////////////////////////////////////////////////////////////////////
void fcnProcessPacket( void ) {
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	00 d0       	rcall	.+0      	; 0x69c <fcnProcessPacket+0x6>
     69c:	00 d0       	rcall	.+0      	; 0x69e <fcnProcessPacket+0x8>
     69e:	1f 92       	push	r1
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	
	cli();
     6a4:	f8 94       	cli
	// Do we have a packet waiting to be processed?
	if ( myCOM.PacketRxStatus == 2 ) {
     6a6:	80 91 01 01 	lds	r24, 0x0101
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	09 f0       	breq	.+2      	; 0x6b0 <fcnProcessPacket+0x1a>
     6ae:	2e c2       	rjmp	.+1116   	; 0xb0c <__stack+0x20d>
		
		
		// Scan Packet for integrity
		
		for ( i=0;i<myCOM.PacketLength;i++ ) {	// Run Packet Analysis
     6b0:	19 82       	std	Y+1, r1	; 0x01
     6b2:	0f c0       	rjmp	.+30     	; 0x6d2 <fcnProcessPacket+0x3c>
			if ( myCOM.PacketData[i] == 0xFE ) myCOM.IsPacketCorrupt = 1;
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	88 2f       	mov	r24, r24
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	89 5f       	subi	r24, 0xF9	; 249
     6bc:	9e 4f       	sbci	r25, 0xFE	; 254
     6be:	fc 01       	movw	r30, r24
     6c0:	80 81       	ld	r24, Z
     6c2:	8e 3f       	cpi	r24, 0xFE	; 254
     6c4:	19 f4       	brne	.+6      	; 0x6cc <fcnProcessPacket+0x36>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 93 2e 01 	sts	0x012E, r24
	if ( myCOM.PacketRxStatus == 2 ) {
		
		
		// Scan Packet for integrity
		
		for ( i=0;i<myCOM.PacketLength;i++ ) {	// Run Packet Analysis
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	8f 5f       	subi	r24, 0xFF	; 255
     6d0:	89 83       	std	Y+1, r24	; 0x01
     6d2:	90 91 02 01 	lds	r25, 0x0102
     6d6:	89 81       	ldd	r24, Y+1	; 0x01
     6d8:	89 17       	cp	r24, r25
     6da:	60 f3       	brcs	.-40     	; 0x6b4 <fcnProcessPacket+0x1e>
			if ( myCOM.PacketData[i] == 0xFE ) myCOM.IsPacketCorrupt = 1;
			//eeprom_write_byte(eepromCOM_RX_RAW+i, myCOM.PacketData[i]);
		}
			
		// If Packet is corrupt: 
		if ( myCOM.IsPacketCorrupt ) {
     6dc:	80 91 2e 01 	lds	r24, 0x012E
     6e0:	88 23       	and	r24, r24
     6e2:	81 f0       	breq	.+32     	; 0x704 <fcnProcessPacket+0x6e>
			// This IS a corrupt packet and counts as CORRUPT Packet
			myCOM.CorruptPackets++;
     6e4:	80 91 2d 01 	lds	r24, 0x012D
     6e8:	8f 5f       	subi	r24, 0xFF	; 255
     6ea:	80 93 2d 01 	sts	0x012D, r24
			// Reset Packet info
			usartCleanPacket();
     6ee:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
			mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	80 93 31 01 	sts	0x0131, r24
			UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     6f8:	81 ec       	ldi	r24, 0xC1	; 193
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	28 e9       	ldi	r18, 0x98	; 152
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
     702:	0e c2       	rjmp	.+1052   	; 0xb20 <__stack+0x221>
		} else {
			// This IS NOT a corrupt packet and counts as Rxed Packet
			myCOM.RxPackets++;
     704:	80 91 2b 01 	lds	r24, 0x012B
     708:	8f 5f       	subi	r24, 0xFF	; 255
     70a:	80 93 2b 01 	sts	0x012B, r24
			
			myCOM.PacketRxStatus = 3;
     70e:	83 e0       	ldi	r24, 0x03	; 3
     710:	80 93 01 01 	sts	0x0101, r24
			
			
			//////////////////////////////////////////////////////////////////////////
			// Perform the necessary Logic on the packet before cleaning
			//////////////////////////////////////////////////////////////////////////
			switch ( myCOM.PacketData[1] ) {
     714:	80 91 08 01 	lds	r24, 0x0108
     718:	88 2f       	mov	r24, r24
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	85 3f       	cpi	r24, 0xF5	; 245
     71e:	91 05       	cpc	r25, r1
     720:	09 f4       	brne	.+2      	; 0x724 <fcnProcessPacket+0x8e>
     722:	67 c1       	rjmp	.+718    	; 0x9f2 <__stack+0xf3>
     724:	86 3f       	cpi	r24, 0xF6	; 246
     726:	91 05       	cpc	r25, r1
     728:	4c f4       	brge	.+18     	; 0x73c <fcnProcessPacket+0xa6>
     72a:	81 3f       	cpi	r24, 0xF1	; 241
     72c:	91 05       	cpc	r25, r1
     72e:	09 f4       	brne	.+2      	; 0x732 <fcnProcessPacket+0x9c>
     730:	d8 c1       	rjmp	.+944    	; 0xae2 <__stack+0x1e3>
     732:	84 3f       	cpi	r24, 0xF4	; 244
     734:	91 05       	cpc	r25, r1
     736:	09 f4       	brne	.+2      	; 0x73a <fcnProcessPacket+0xa4>
     738:	9b c1       	rjmp	.+822    	; 0xa70 <__stack+0x171>
     73a:	dc c1       	rjmp	.+952    	; 0xaf4 <__stack+0x1f5>
     73c:	86 3f       	cpi	r24, 0xF6	; 246
     73e:	91 05       	cpc	r25, r1
     740:	09 f4       	brne	.+2      	; 0x744 <fcnProcessPacket+0xae>
     742:	63 c0       	rjmp	.+198    	; 0x80a <fcnProcessPacket+0x174>
     744:	87 3f       	cpi	r24, 0xF7	; 247
     746:	91 05       	cpc	r25, r1
     748:	09 f0       	breq	.+2      	; 0x74c <fcnProcessPacket+0xb6>
     74a:	d4 c1       	rjmp	.+936    	; 0xaf4 <__stack+0x1f5>
				case 0xF7:	// Divert Trigger
					// Reset main clock to avoid any overflow conditions
					myCOM.PacketData[3] &= 0x0F;
     74c:	80 91 0a 01 	lds	r24, 0x010A
     750:	8f 70       	andi	r24, 0x0F	; 15
     752:	80 93 0a 01 	sts	0x010A, r24
					if ( myCOM.PacketData[3] > 0 && myCOM.PacketData[3] < 8 && mySys.chTran == BOARD_TYPE_DIVERT ) {
     756:	80 91 0a 01 	lds	r24, 0x010A
     75a:	88 23       	and	r24, r24
     75c:	09 f4       	brne	.+2      	; 0x760 <fcnProcessPacket+0xca>
     75e:	49 c0       	rjmp	.+146    	; 0x7f2 <fcnProcessPacket+0x15c>
     760:	80 91 0a 01 	lds	r24, 0x010A
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	08 f0       	brcs	.+2      	; 0x76a <fcnProcessPacket+0xd4>
     768:	44 c0       	rjmp	.+136    	; 0x7f2 <fcnProcessPacket+0x15c>
     76a:	80 91 30 01 	lds	r24, 0x0130
     76e:	88 23       	and	r24, r24
     770:	09 f0       	breq	.+2      	; 0x774 <fcnProcessPacket+0xde>
     772:	3f c0       	rjmp	.+126    	; 0x7f2 <fcnProcessPacket+0x15c>
						//PORTC &= ~(0x04);
						// Get direction from this packet
						myDivert.DivertDirection = 0x00;
     774:	10 92 7e 01 	sts	0x017E, r1
						myDivert.DivertDirection = myCOM.PacketData[2] & 0b10000000;
     778:	80 91 09 01 	lds	r24, 0x0109
     77c:	80 78       	andi	r24, 0x80	; 128
     77e:	80 93 7e 01 	sts	0x017E, r24
						myDivert.DivertDirection = myDivert.DivertDirection >> 1;
     782:	80 91 7e 01 	lds	r24, 0x017E
     786:	86 95       	lsr	r24
     788:	80 93 7e 01 	sts	0x017E, r24
						
						myCOM.PacketData[2] &= 0x7F;
     78c:	80 91 09 01 	lds	r24, 0x0109
     790:	8f 77       	andi	r24, 0x7F	; 127
     792:	80 93 09 01 	sts	0x0109, r24
						if ( myCOM.PacketData[2] == mySys.devAddress ) {
     796:	90 91 09 01 	lds	r25, 0x0109
     79a:	80 91 2f 01 	lds	r24, 0x012F
     79e:	98 17       	cp	r25, r24
     7a0:	e9 f4       	brne	.+58     	; 0x7dc <fcnProcessPacket+0x146>
							UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
     7a2:	81 ec       	ldi	r24, 0xC1	; 193
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	28 e8       	ldi	r18, 0x88	; 136
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
							i = UDR0;
     7ac:	86 ec       	ldi	r24, 0xC6	; 198
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	fc 01       	movw	r30, r24
     7b2:	80 81       	ld	r24, Z
     7b4:	89 83       	std	Y+1, r24	; 0x01
							i = UDR0;
     7b6:	86 ec       	ldi	r24, 0xC6	; 198
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	89 83       	std	Y+1, r24	; 0x01
							myDivert.PhotoeyeTripped = 0x00;
     7c0:	10 92 7d 01 	sts	0x017D, r1
							mySys.clkCount = 0;
     7c4:	10 92 32 01 	sts	0x0132, r1
     7c8:	10 92 33 01 	sts	0x0133, r1
     7cc:	10 92 34 01 	sts	0x0134, r1
     7d0:	10 92 35 01 	sts	0x0135, r1
							mySys.chMode = SYSTEM_MODE_PHOTOEYE;		// Photo eye Mode
     7d4:	82 e0       	ldi	r24, 0x02	; 2
     7d6:	80 93 31 01 	sts	0x0131, r24
						myDivert.DivertDirection = 0x00;
						myDivert.DivertDirection = myCOM.PacketData[2] & 0b10000000;
						myDivert.DivertDirection = myDivert.DivertDirection >> 1;
						
						myCOM.PacketData[2] &= 0x7F;
						if ( myCOM.PacketData[2] == mySys.devAddress ) {
     7da:	16 c0       	rjmp	.+44     	; 0x808 <fcnProcessPacket+0x172>
							myDivert.PhotoeyeTripped = 0x00;
							mySys.clkCount = 0;
							mySys.chMode = SYSTEM_MODE_PHOTOEYE;		// Photo eye Mode
						} else {
							// End of action, reset everything
							usartCleanPacket();
     7dc:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
							mySys.chMode = SYSTEM_MODE_DATA_WAIT;	
     7e0:	85 e0       	ldi	r24, 0x05	; 5
     7e2:	80 93 31 01 	sts	0x0131, r24
							UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     7e6:	81 ec       	ldi	r24, 0xC1	; 193
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	28 e9       	ldi	r18, 0x98	; 152
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
						myDivert.DivertDirection = 0x00;
						myDivert.DivertDirection = myCOM.PacketData[2] & 0b10000000;
						myDivert.DivertDirection = myDivert.DivertDirection >> 1;
						
						myCOM.PacketData[2] &= 0x7F;
						if ( myCOM.PacketData[2] == mySys.devAddress ) {
     7f0:	0b c0       	rjmp	.+22     	; 0x808 <fcnProcessPacket+0x172>
							//}
						//}
											
						
						
						usartCleanPacket();
     7f2:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
						mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     7f6:	85 e0       	ldi	r24, 0x05	; 5
     7f8:	80 93 31 01 	sts	0x0131, r24
						UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     7fc:	81 ec       	ldi	r24, 0xC1	; 193
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	28 e9       	ldi	r18, 0x98	; 152
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
						
					}
				break;
     806:	81 c1       	rjmp	.+770    	; 0xb0a <__stack+0x20b>
     808:	80 c1       	rjmp	.+768    	; 0xb0a <__stack+0x20b>
				case 0xF6:	// Programmer Trigger
					myCOM.ConveyorSpeed = myCOM.PacketData[2];
     80a:	80 91 09 01 	lds	r24, 0x0109
     80e:	80 93 25 01 	sts	0x0125, r24
					mySys.ConveyorSpeedByte = myCOM.ConveyorSpeed;
     812:	80 91 25 01 	lds	r24, 0x0125
     816:	80 93 37 01 	sts	0x0137, r24
					mySys.ConveyorSpeed = ( mySys.ConveyorSpeedByte * 5 ) + 60;	// Obtain on ft/min
     81a:	80 91 37 01 	lds	r24, 0x0137
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	c9 01       	movw	r24, r18
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	82 0f       	add	r24, r18
     82e:	93 1f       	adc	r25, r19
     830:	cc 96       	adiw	r24, 0x3c	; 60
     832:	90 93 39 01 	sts	0x0139, r25
     836:	80 93 38 01 	sts	0x0138, r24
					myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( float ) mySys.ConveyorSpeed ) * ( ( float ) mathTO_MM_SEC ) );
     83a:	80 91 38 01 	lds	r24, 0x0138
     83e:	90 91 39 01 	lds	r25, 0x0139
     842:	cc 01       	movw	r24, r24
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e0       	ldi	r27, 0x00	; 0
     848:	bc 01       	movw	r22, r24
     84a:	cd 01       	movw	r24, r26
     84c:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__floatunsisf>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	2c e5       	ldi	r18, 0x5C	; 92
     856:	3f e8       	ldi	r19, 0x8F	; 143
     858:	42 ea       	ldi	r20, 0xA2	; 162
     85a:	50 e4       	ldi	r21, 0x40	; 64
     85c:	bc 01       	movw	r22, r24
     85e:	cd 01       	movw	r24, r26
     860:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     864:	dc 01       	movw	r26, r24
     866:	cb 01       	movw	r24, r22
     868:	bc 01       	movw	r22, r24
     86a:	cd 01       	movw	r24, r26
     86c:	0e 94 af 09 	call	0x135e	; 0x135e <__fixunssfsi>
     870:	dc 01       	movw	r26, r24
     872:	cb 01       	movw	r24, r22
     874:	90 93 5d 01 	sts	0x015D, r25
     878:	80 93 5c 01 	sts	0x015C, r24
					myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( uint32_t ) mathSLAT_WIDTH ) / ( ( uint32_t ) myDivert.SlatTravelTimes[0] ) );
     87c:	80 91 5c 01 	lds	r24, 0x015C
     880:	90 91 5d 01 	lds	r25, 0x015D
     884:	9c 01       	movw	r18, r24
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	8e e1       	ldi	r24, 0x1E	; 30
     88c:	9c e6       	ldi	r25, 0x6C	; 108
     88e:	a2 e0       	ldi	r26, 0x02	; 2
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	bc 01       	movw	r22, r24
     894:	cd 01       	movw	r24, r26
     896:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodsi4>
     89a:	da 01       	movw	r26, r20
     89c:	c9 01       	movw	r24, r18
     89e:	90 93 5d 01 	sts	0x015D, r25
     8a2:	80 93 5c 01 	sts	0x015C, r24
					for ( myDivert.i=1;myDivert.i<7;myDivert.i++ ) {
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	80 93 6a 01 	sts	0x016A, r24
     8ac:	22 c0       	rjmp	.+68     	; 0x8f2 <fcnProcessPacket+0x25c>
						myDivert.SlatTravelTimes[myDivert.i] = myDivert.SlatTravelTimes[0] * (1 + myDivert.i);
     8ae:	80 91 6a 01 	lds	r24, 0x016A
     8b2:	88 2f       	mov	r24, r24
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	60 91 5c 01 	lds	r22, 0x015C
     8ba:	70 91 5d 01 	lds	r23, 0x015D
     8be:	20 91 6a 01 	lds	r18, 0x016A
     8c2:	22 2f       	mov	r18, r18
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	2f 5f       	subi	r18, 0xFF	; 255
     8c8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ca:	a9 01       	movw	r20, r18
     8cc:	64 9f       	mul	r22, r20
     8ce:	90 01       	movw	r18, r0
     8d0:	65 9f       	mul	r22, r21
     8d2:	30 0d       	add	r19, r0
     8d4:	74 9f       	mul	r23, r20
     8d6:	30 0d       	add	r19, r0
     8d8:	11 24       	eor	r1, r1
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	84 5a       	subi	r24, 0xA4	; 164
     8e0:	9e 4f       	sbci	r25, 0xFE	; 254
     8e2:	fc 01       	movw	r30, r24
     8e4:	31 83       	std	Z+1, r19	; 0x01
     8e6:	20 83       	st	Z, r18
					myCOM.ConveyorSpeed = myCOM.PacketData[2];
					mySys.ConveyorSpeedByte = myCOM.ConveyorSpeed;
					mySys.ConveyorSpeed = ( mySys.ConveyorSpeedByte * 5 ) + 60;	// Obtain on ft/min
					myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( float ) mySys.ConveyorSpeed ) * ( ( float ) mathTO_MM_SEC ) );
					myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( uint32_t ) mathSLAT_WIDTH ) / ( ( uint32_t ) myDivert.SlatTravelTimes[0] ) );
					for ( myDivert.i=1;myDivert.i<7;myDivert.i++ ) {
     8e8:	80 91 6a 01 	lds	r24, 0x016A
     8ec:	8f 5f       	subi	r24, 0xFF	; 255
     8ee:	80 93 6a 01 	sts	0x016A, r24
     8f2:	80 91 6a 01 	lds	r24, 0x016A
     8f6:	87 30       	cpi	r24, 0x07	; 7
     8f8:	d0 f2       	brcs	.-76     	; 0x8ae <fcnProcessPacket+0x218>
						myDivert.SlatTravelTimes[myDivert.i] = myDivert.SlatTravelTimes[0] * (1 + myDivert.i);
					}
					eeprom_write_byte(eepromSYS_CONVEYOR_SPEED, mySys.ConveyorSpeedByte);
     8fa:	80 91 37 01 	lds	r24, 0x0137
     8fe:	68 2f       	mov	r22, r24
     900:	80 e7       	ldi	r24, 0x70	; 112
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
					eeprom_write_word(eepromSYS_CONVEYOR_SPEED+5,myDivert.SlatTravelTimes[0]);	// Debug
     908:	80 91 5c 01 	lds	r24, 0x015C
     90c:	90 91 5d 01 	lds	r25, 0x015D
     910:	bc 01       	movw	r22, r24
     912:	85 e7       	ldi	r24, 0x75	; 117
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__eewr_word_m328p>
					
					//myDivert.ProgrammingDuration = ( ( uint32_t ) 70 * ( uint32_t ) myDivert.SlatTravelTimes[0] );
					myDivert.ProgrammingDuration = ( ( uint32_t ) 300 * ( uint32_t ) myDivert.SlatTravelTimes[0] );
     91a:	80 91 5c 01 	lds	r24, 0x015C
     91e:	90 91 5d 01 	lds	r25, 0x015D
     922:	9c 01       	movw	r18, r24
     924:	40 e0       	ldi	r20, 0x00	; 0
     926:	50 e0       	ldi	r21, 0x00	; 0
     928:	8c e2       	ldi	r24, 0x2C	; 44
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	dc 01       	movw	r26, r24
     92e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__muluhisi3>
     932:	dc 01       	movw	r26, r24
     934:	cb 01       	movw	r24, r22
     936:	80 93 6f 01 	sts	0x016F, r24
     93a:	90 93 70 01 	sts	0x0170, r25
     93e:	a0 93 71 01 	sts	0x0171, r26
     942:	b0 93 72 01 	sts	0x0172, r27
					
					eeprom_write_dword(eepromSYS_CONVEYOR_SPEED+7,myDivert.ProgrammingDuration);	// Debug
     946:	80 91 6f 01 	lds	r24, 0x016F
     94a:	90 91 70 01 	lds	r25, 0x0170
     94e:	a0 91 71 01 	lds	r26, 0x0171
     952:	b0 91 72 01 	lds	r27, 0x0172
     956:	ac 01       	movw	r20, r24
     958:	bd 01       	movw	r22, r26
     95a:	87 e7       	ldi	r24, 0x77	; 119
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 24 0b 	call	0x1648	; 0x1648 <__eewr_dword_m328p>
					
					// Divert Delay now takes the role of slat-duration run time
					myCOM.DivertDelay = myCOM.DivertDelay & 0b11110000;	// Clear byte to send
     962:	80 91 27 01 	lds	r24, 0x0127
     966:	80 7f       	andi	r24, 0xF0	; 240
     968:	80 93 27 01 	sts	0x0127, r24
					myCOM.PacketData[3] = myCOM.PacketData[3] & 0b00001111;
     96c:	80 91 0a 01 	lds	r24, 0x010A
     970:	8f 70       	andi	r24, 0x0F	; 15
     972:	80 93 0a 01 	sts	0x010A, r24
					// Correct value if needed
					if ( myCOM.PacketData[3] < 4 ) {
     976:	80 91 0a 01 	lds	r24, 0x010A
     97a:	84 30       	cpi	r24, 0x04	; 4
     97c:	18 f4       	brcc	.+6      	; 0x984 <__stack+0x85>
						myCOM.PacketData[3] = 4;
     97e:	84 e0       	ldi	r24, 0x04	; 4
     980:	80 93 0a 01 	sts	0x010A, r24
					}
					myCOM.DivertDelay = myCOM.DivertDelay | myCOM.PacketData[3];
     984:	90 91 27 01 	lds	r25, 0x0127
     988:	80 91 0a 01 	lds	r24, 0x010A
     98c:	89 2b       	or	r24, r25
     98e:	80 93 27 01 	sts	0x0127, r24
					//eeprom_write_byte(eepromCOM_RX_RAW+2,myCOM.DivertDelay);
				
					if ( mySys.chTran == BOARD_TYPE_PARAMETER ) {
     992:	80 91 30 01 	lds	r24, 0x0130
     996:	81 30       	cpi	r24, 0x01	; 1
     998:	09 f5       	brne	.+66     	; 0x9dc <__stack+0xdd>
						// This is to be done since this is a Programming Node
						UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
     99a:	81 ec       	ldi	r24, 0xC1	; 193
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	28 e8       	ldi	r18, 0x88	; 136
     9a0:	fc 01       	movw	r30, r24
     9a2:	20 83       	st	Z, r18
						mySys.clkCount = 0;
     9a4:	10 92 32 01 	sts	0x0132, r1
     9a8:	10 92 33 01 	sts	0x0133, r1
     9ac:	10 92 34 01 	sts	0x0134, r1
     9b0:	10 92 35 01 	sts	0x0135, r1
						myDivert.ByteDelay = mySys.clkCount;
     9b4:	80 91 32 01 	lds	r24, 0x0132
     9b8:	90 91 33 01 	lds	r25, 0x0133
     9bc:	a0 91 34 01 	lds	r26, 0x0134
     9c0:	b0 91 35 01 	lds	r27, 0x0135
     9c4:	80 93 73 01 	sts	0x0173, r24
     9c8:	90 93 74 01 	sts	0x0174, r25
     9cc:	a0 93 75 01 	sts	0x0175, r26
     9d0:	b0 93 76 01 	sts	0x0176, r27
						mySys.chMode = SYSTEM_MODE_PROGRAM;
     9d4:	83 e0       	ldi	r24, 0x03	; 3
     9d6:	80 93 31 01 	sts	0x0131, r24
						// End of action, reset everything
						usartCleanPacket();
						mySys.chMode = SYSTEM_MODE_DATA_WAIT;
						UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
					}
				break;
     9da:	97 c0       	rjmp	.+302    	; 0xb0a <__stack+0x20b>
						mySys.clkCount = 0;
						myDivert.ByteDelay = mySys.clkCount;
						mySys.chMode = SYSTEM_MODE_PROGRAM;
					} else {
						// End of action, reset everything
						usartCleanPacket();
     9dc:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
						mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	80 93 31 01 	sts	0x0131, r24
						UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     9e6:	81 ec       	ldi	r24, 0xC1	; 193
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	28 e9       	ldi	r18, 0x98	; 152
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
					}
				break;
     9f0:	8c c0       	rjmp	.+280    	; 0xb0a <__stack+0x20b>
				case 0xF5:	// A whole new set of table data is being transmitted and will need to be stored
					UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
     9f2:	81 ec       	ldi	r24, 0xC1	; 193
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	28 e8       	ldi	r18, 0x88	; 136
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18
					for ( myDivert.i = 0; myDivert.i < 28 ; myDivert.i++ ) {
     9fc:	10 92 6a 01 	sts	0x016A, r1
     a00:	28 c0       	rjmp	.+80     	; 0xa52 <__stack+0x153>
						myDivert.tblDivertData[myDivert.i] = myCOM.PacketData[myDivert.i + 2];	// Store the byte in RAM and EEPROM
     a02:	80 91 6a 01 	lds	r24, 0x016A
     a06:	88 2f       	mov	r24, r24
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	20 91 6a 01 	lds	r18, 0x016A
     a0e:	22 2f       	mov	r18, r18
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	2e 5f       	subi	r18, 0xFE	; 254
     a14:	3f 4f       	sbci	r19, 0xFF	; 255
     a16:	29 5f       	subi	r18, 0xF9	; 249
     a18:	3e 4f       	sbci	r19, 0xFE	; 254
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	81 5c       	subi	r24, 0xC1	; 193
     a20:	9e 4f       	sbci	r25, 0xFE	; 254
     a22:	fc 01       	movw	r30, r24
     a24:	20 83       	st	Z, r18
						eeprom_write_byte( eepromDYV_TABLE_VALUES + myDivert.i, myCOM.PacketData[myDivert.i + 2] );
     a26:	80 91 6a 01 	lds	r24, 0x016A
     a2a:	88 2f       	mov	r24, r24
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	02 96       	adiw	r24, 0x02	; 2
     a30:	89 5f       	subi	r24, 0xF9	; 249
     a32:	9e 4f       	sbci	r25, 0xFE	; 254
     a34:	fc 01       	movw	r30, r24
     a36:	20 81       	ld	r18, Z
     a38:	80 91 6a 01 	lds	r24, 0x016A
     a3c:	88 2f       	mov	r24, r24
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	93 95       	inc	r25
     a42:	62 2f       	mov	r22, r18
     a44:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
						UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
					}
				break;
				case 0xF5:	// A whole new set of table data is being transmitted and will need to be stored
					UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
					for ( myDivert.i = 0; myDivert.i < 28 ; myDivert.i++ ) {
     a48:	80 91 6a 01 	lds	r24, 0x016A
     a4c:	8f 5f       	subi	r24, 0xFF	; 255
     a4e:	80 93 6a 01 	sts	0x016A, r24
     a52:	80 91 6a 01 	lds	r24, 0x016A
     a56:	8c 31       	cpi	r24, 0x1C	; 28
     a58:	a0 f2       	brcs	.-88     	; 0xa02 <__stack+0x103>
						myDivert.tblDivertData[myDivert.i] = myCOM.PacketData[myDivert.i + 2];	// Store the byte in RAM and EEPROM
						eeprom_write_byte( eepromDYV_TABLE_VALUES + myDivert.i, myCOM.PacketData[myDivert.i + 2] );
					}
					// End of action, reset everything
					usartCleanPacket();
     a5a:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
					UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     a5e:	81 ec       	ldi	r24, 0xC1	; 193
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	28 e9       	ldi	r18, 0x98	; 152
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
					mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     a68:	85 e0       	ldi	r24, 0x05	; 5
     a6a:	80 93 31 01 	sts	0x0131, r24
				break;
     a6e:	4d c0       	rjmp	.+154    	; 0xb0a <__stack+0x20b>
				case 0xF4:	// Update the Photoeye Timeout accordingly
					UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
     a70:	81 ec       	ldi	r24, 0xC1	; 193
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	28 e8       	ldi	r18, 0x88	; 136
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
					mySys.PhotoeyeDelayWindow = myCOM.PacketData[2];
     a7a:	80 91 09 01 	lds	r24, 0x0109
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	90 93 3b 01 	sts	0x013B, r25
     a86:	80 93 3a 01 	sts	0x013A, r24
					mySys.PhotoeyeDelayWindow = mySys.PhotoeyeDelayWindow << 8;
     a8a:	80 91 3a 01 	lds	r24, 0x013A
     a8e:	90 91 3b 01 	lds	r25, 0x013B
     a92:	98 2f       	mov	r25, r24
     a94:	88 27       	eor	r24, r24
     a96:	90 93 3b 01 	sts	0x013B, r25
     a9a:	80 93 3a 01 	sts	0x013A, r24
					mySys.PhotoeyeDelayWindow |= myCOM.PacketData[3];
     a9e:	20 91 3a 01 	lds	r18, 0x013A
     aa2:	30 91 3b 01 	lds	r19, 0x013B
     aa6:	80 91 0a 01 	lds	r24, 0x010A
     aaa:	88 2f       	mov	r24, r24
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	82 2b       	or	r24, r18
     ab0:	93 2b       	or	r25, r19
     ab2:	90 93 3b 01 	sts	0x013B, r25
     ab6:	80 93 3a 01 	sts	0x013A, r24
					eeprom_write_word(eepromPEYE_TIMEOUT, mySys.PhotoeyeDelayWindow);
     aba:	80 91 3a 01 	lds	r24, 0x013A
     abe:	90 91 3b 01 	lds	r25, 0x013B
     ac2:	bc 01       	movw	r22, r24
     ac4:	80 e6       	ldi	r24, 0x60	; 96
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__eewr_word_m328p>
					// End of action, reset everything
					usartCleanPacket();
     acc:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
					UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     ad0:	81 ec       	ldi	r24, 0xC1	; 193
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	28 e9       	ldi	r18, 0x98	; 152
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
					mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     ada:	85 e0       	ldi	r24, 0x05	; 5
     adc:	80 93 31 01 	sts	0x0131, r24
				break;
     ae0:	14 c0       	rjmp	.+40     	; 0xb0a <__stack+0x20b>
				case 0xF1:		// Enter Debug Mode
					myDivert.irSendPacket = 0xFF;
     ae2:	8f ef       	ldi	r24, 0xFF	; 255
     ae4:	80 93 6e 01 	sts	0x016E, r24
					myDivert.irPacketLength = 0;
     ae8:	10 92 6d 01 	sts	0x016D, r1
					mySys.chMode = SYSTEM_MODE_DEBUG;
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	80 93 31 01 	sts	0x0131, r24
					
					
					//usartCleanPacket();
					//UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
					//mySys.chMode = 'I';				
				break;
     af2:	0b c0       	rjmp	.+22     	; 0xb0a <__stack+0x20b>
				default:
					// Reset Packet info
					// End of action, reset everything
					usartCleanPacket();
     af4:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
					UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     af8:	81 ec       	ldi	r24, 0xC1	; 193
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	28 e9       	ldi	r18, 0x98	; 152
     afe:	fc 01       	movw	r30, r24
     b00:	20 83       	st	Z, r18
					mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     b02:	85 e0       	ldi	r24, 0x05	; 5
     b04:	80 93 31 01 	sts	0x0131, r24
				break;
     b08:	00 00       	nop
     b0a:	0a c0       	rjmp	.+20     	; 0xb20 <__stack+0x221>
			}
		}
	} else {
		// End of action, reset everything
		usartCleanPacket();
     b0c:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
		UCSR0B = 0b10011000;	// Rx Disabled. Rx Interrupt Enabled
     b10:	81 ec       	ldi	r24, 0xC1	; 193
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	28 e9       	ldi	r18, 0x98	; 152
     b16:	fc 01       	movw	r30, r24
     b18:	20 83       	st	Z, r18
		mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     b1a:	85 e0       	ldi	r24, 0x05	; 5
     b1c:	80 93 31 01 	sts	0x0131, r24
	}
	// Run Network Statistics
	//usartNetworkStatistics();
	
	sei();
     b20:	78 94       	sei
}
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	df 91       	pop	r29
     b2e:	cf 91       	pop	r28
     b30:	08 95       	ret

00000b32 <USART_SendByte>:

//////////////////////////////////////////////////////////////////////////
// Byte Transmission Function
//////////////////////////////////////////////////////////////////////////
void USART_SendByte(uint8_t u8Data) {
     b32:	cf 93       	push	r28
     b34:	df 93       	push	r29
     b36:	1f 92       	push	r1
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	89 83       	std	Y+1, r24	; 0x01
	// Wait until last byte has been transmitted
	while( ( UCSR0A & ( 1<< UDRE0 ) ) == 0);
     b3e:	00 00       	nop
     b40:	80 ec       	ldi	r24, 0xC0	; 192
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	fc 01       	movw	r30, r24
     b46:	80 81       	ld	r24, Z
     b48:	88 2f       	mov	r24, r24
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	80 72       	andi	r24, 0x20	; 32
     b4e:	99 27       	eor	r25, r25
     b50:	00 97       	sbiw	r24, 0x00	; 0
     b52:	b1 f3       	breq	.-20     	; 0xb40 <USART_SendByte+0xe>
	// Transmit data
	UDR0 = u8Data;
     b54:	86 ec       	ldi	r24, 0xC6	; 198
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	29 81       	ldd	r18, Y+1	; 0x01
     b5a:	fc 01       	movw	r30, r24
     b5c:	20 83       	st	Z, r18
}
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <__vector_18>:
//////////////////////////////////////////////////////////////////////////
// USART RX INTERRUPT SERVICE ROUTINE
//////////////////////////////////////////////////////////////////////////
// Rx ISR
uint8_t intRxDummy;
ISR( USART_RX_vect ) {
     b66:	1f 92       	push	r1
     b68:	0f 92       	push	r0
     b6a:	00 90 5f 00 	lds	r0, 0x005F
     b6e:	0f 92       	push	r0
     b70:	11 24       	eor	r1, r1
     b72:	2f 93       	push	r18
     b74:	3f 93       	push	r19
     b76:	4f 93       	push	r20
     b78:	5f 93       	push	r21
     b7a:	6f 93       	push	r22
     b7c:	7f 93       	push	r23
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	af 93       	push	r26
     b84:	bf 93       	push	r27
     b86:	ef 93       	push	r30
     b88:	ff 93       	push	r31
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
	//if (mySys.chTran != BOARD_TYPE_DIVERT (UCSR0A & ( 1 << FE0 )) ) {
	//PORTC |= 0x01;
	
	
		
	if ( myCOM.PacketRxStatus < 2 ) {	// Are we waiting for data?
     b92:	80 91 01 01 	lds	r24, 0x0101
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	08 f0       	brcs	.+2      	; 0xb9c <__vector_18+0x36>
     b9a:	f7 c0       	rjmp	.+494    	; 0xd8a <__vector_18+0x224>
		//if ( ( UCSR0A & (1<<RXC0) )) {	// If a byte has been received and is waiting to be picked up
		if ( (UCSR0A & ( 1 << FE0 )) ) {
     b9c:	80 ec       	ldi	r24, 0xC0	; 192
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	fc 01       	movw	r30, r24
     ba2:	80 81       	ld	r24, Z
     ba4:	88 2f       	mov	r24, r24
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	80 71       	andi	r24, 0x10	; 16
     baa:	99 27       	eor	r25, r25
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	09 f1       	breq	.+66     	; 0xbf2 <__vector_18+0x8c>
			intRxDummy = UDR0;
     bb0:	86 ec       	ldi	r24, 0xC6	; 198
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	fc 01       	movw	r30, r24
     bb6:	80 81       	ld	r24, Z
     bb8:	80 93 3c 01 	sts	0x013C, r24
			myCOM.PacketData[0] = 0x00;
     bbc:	10 92 07 01 	sts	0x0107, r1
			myCOM.PacketData[1] = 0xFE;
     bc0:	8e ef       	ldi	r24, 0xFE	; 254
     bc2:	80 93 08 01 	sts	0x0108, r24
			myCOM.PacketData[2] = 0xFE;
     bc6:	8e ef       	ldi	r24, 0xFE	; 254
     bc8:	80 93 09 01 	sts	0x0109, r24
			myCOM.PacketData[3] = 0xFE;	// Erroneous Data Byte
     bcc:	8e ef       	ldi	r24, 0xFE	; 254
     bce:	80 93 0a 01 	sts	0x010A, r24
			myCOM.PacketLength = 4;
     bd2:	84 e0       	ldi	r24, 0x04	; 4
     bd4:	80 93 02 01 	sts	0x0102, r24
			myCOM.LoP = 0x00;
     bd8:	10 92 03 01 	sts	0x0103, r1
			UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
     bdc:	81 ec       	ldi	r24, 0xC1	; 193
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	28 e8       	ldi	r18, 0x88	; 136
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
			mySys.chMode = SYSTEM_MODE_PROCESS;
     be6:	10 92 31 01 	sts	0x0131, r1
			myCOM.PacketRxStatus = 2;	// Packet Rx Complete
     bea:	82 e0       	ldi	r24, 0x02	; 2
     bec:	80 93 01 01 	sts	0x0101, r24
     bf0:	cc c0       	rjmp	.+408    	; 0xd8a <__vector_18+0x224>
		} else if ( ( UCSR0A & (1<<RXC0) ) ) {	// If a byte has been received and is waiting to be picked up
     bf2:	80 ec       	ldi	r24, 0xC0	; 192
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	fc 01       	movw	r30, r24
     bf8:	80 81       	ld	r24, Z
     bfa:	88 23       	and	r24, r24
     bfc:	0c f0       	brlt	.+2      	; 0xc00 <__vector_18+0x9a>
     bfe:	c5 c0       	rjmp	.+394    	; 0xd8a <__vector_18+0x224>
			
			if ( myCOM.PacketRxStatus == 0 ) {
     c00:	80 91 01 01 	lds	r24, 0x0101
     c04:	88 23       	and	r24, r24
     c06:	31 f4       	brne	.+12     	; 0xc14 <__vector_18+0xae>
				myCOM.PacketRxStatus = 1;	// We are in the process of receiving and packet
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	80 93 01 01 	sts	0x0101, r24
				mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     c0e:	85 e0       	ldi	r24, 0x05	; 5
     c10:	80 93 31 01 	sts	0x0131, r24
			}
			
			if ( !(UCSR0A & ( 1 << UPE0 ) ) ) {	// Is Parity fine?
     c14:	80 ec       	ldi	r24, 0xC0	; 192
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	84 70       	andi	r24, 0x04	; 4
     c22:	99 27       	eor	r25, r25
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	69 f4       	brne	.+26     	; 0xc42 <__vector_18+0xdc>
				// Parity OK
				myCOM.PacketData[myCOM.PacketLength] = UDR0;
     c28:	80 91 02 01 	lds	r24, 0x0102
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	26 ec       	ldi	r18, 0xC6	; 198
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	f9 01       	movw	r30, r18
     c36:	20 81       	ld	r18, Z
     c38:	89 5f       	subi	r24, 0xF9	; 249
     c3a:	9e 4f       	sbci	r25, 0xFE	; 254
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
     c40:	12 c0       	rjmp	.+36     	; 0xc66 <__vector_18+0x100>
			} else {	// Error in Rx Detected
				myCOM.PacketData[myCOM.PacketLength] = 0xFE;	// Erroneous Data Byte
     c42:	80 91 02 01 	lds	r24, 0x0102
     c46:	88 2f       	mov	r24, r24
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	89 5f       	subi	r24, 0xF9	; 249
     c4c:	9e 4f       	sbci	r25, 0xFE	; 254
     c4e:	2e ef       	ldi	r18, 0xFE	; 254
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
				intRxDummy = UDR0;
     c54:	86 ec       	ldi	r24, 0xC6	; 198
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	fc 01       	movw	r30, r24
     c5a:	80 81       	ld	r24, Z
     c5c:	80 93 3c 01 	sts	0x013C, r24
				myCOM.IsPacketCorrupt = 1;
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	80 93 2e 01 	sts	0x012E, r24
			}
			
			myCOM.PacketLength++;	// Increment Packet Length
     c66:	80 91 02 01 	lds	r24, 0x0102
     c6a:	8f 5f       	subi	r24, 0xFF	; 255
     c6c:	80 93 02 01 	sts	0x0102, r24
				// Check if LoP counter is being used
			myCOM.LoP--; // DECREASE: LoP Count
     c70:	80 91 03 01 	lds	r24, 0x0103
     c74:	81 50       	subi	r24, 0x01	; 1
     c76:	80 93 03 01 	sts	0x0103, r24
			
			if ( myCOM.PacketLength > 29 ) {
     c7a:	80 91 02 01 	lds	r24, 0x0102
     c7e:	8e 31       	cpi	r24, 0x1E	; 30
     c80:	10 f0       	brcs	.+4      	; 0xc86 <__vector_18+0x120>
				myCOM.LoP = 0;
     c82:	10 92 03 01 	sts	0x0103, r1
			}
			
			
			
			if ( myCOM.PacketLength == 2 ) {	// Set LoP if this is the second byte
     c86:	80 91 02 01 	lds	r24, 0x0102
     c8a:	82 30       	cpi	r24, 0x02	; 2
     c8c:	b9 f5       	brne	.+110    	; 0xcfc <__vector_18+0x196>
				if ( myCOM.PacketData[0] == myCOM.PacketData[1] ) {
     c8e:	90 91 07 01 	lds	r25, 0x0107
     c92:	80 91 08 01 	lds	r24, 0x0108
     c96:	98 17       	cp	r25, r24
     c98:	31 f5       	brne	.+76     	; 0xce6 <__vector_18+0x180>
					switch ( myCOM.PacketData[1] ) {	// Set Lop to the correct value
     c9a:	80 91 08 01 	lds	r24, 0x0108
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	85 3f       	cpi	r24, 0xF5	; 245
     ca4:	91 05       	cpc	r25, r1
     ca6:	b1 f0       	breq	.+44     	; 0xcd4 <__vector_18+0x16e>
     ca8:	86 3f       	cpi	r24, 0xF6	; 246
     caa:	91 05       	cpc	r25, r1
     cac:	3c f4       	brge	.+14     	; 0xcbc <__vector_18+0x156>
     cae:	81 3f       	cpi	r24, 0xF1	; 241
     cb0:	91 05       	cpc	r25, r1
     cb2:	41 f0       	breq	.+16     	; 0xcc4 <__vector_18+0x15e>
     cb4:	84 3f       	cpi	r24, 0xF4	; 244
     cb6:	91 05       	cpc	r25, r1
     cb8:	49 f0       	breq	.+18     	; 0xccc <__vector_18+0x166>
     cba:	10 c0       	rjmp	.+32     	; 0xcdc <__vector_18+0x176>
     cbc:	88 3f       	cpi	r24, 0xF8	; 248
     cbe:	91 05       	cpc	r25, r1
     cc0:	6c f4       	brge	.+26     	; 0xcdc <__vector_18+0x176>
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__vector_18+0x166>
						case 0xF1:
						myCOM.LoP = 1;	// Two bytes left until LoP
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	80 93 03 01 	sts	0x0103, r24
						break;
     cca:	0c c0       	rjmp	.+24     	; 0xce4 <__vector_18+0x17e>
						case 0xF6:	// ADDED Feature: Number of slat-durations to run for
						case 0xF4:
						case 0xF7:
						myCOM.LoP = 2;	// Two bytes left until LoP
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	80 93 03 01 	sts	0x0103, r24
						break;
     cd2:	08 c0       	rjmp	.+16     	; 0xce4 <__vector_18+0x17e>
						case 0xF5:
						myCOM.LoP = 28;		// Twenty Eight Bytes left until LoP
     cd4:	8c e1       	ldi	r24, 0x1C	; 28
     cd6:	80 93 03 01 	sts	0x0103, r24
						break;
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__vector_18+0x17e>
						default:	// If none of the above, reset and ignore
						myCOM.LoP = 2;		// Twenty Eight Bytes left until LoP
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	80 93 03 01 	sts	0x0103, r24
						
						
						break;
     ce2:	00 00       	nop
     ce4:	0b c0       	rjmp	.+22     	; 0xcfc <__vector_18+0x196>
					}
				} else {
					//PORTC |= 0x01;	// YELLOW
					intRxDummy = UDR0;
     ce6:	86 ec       	ldi	r24, 0xC6	; 198
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	80 93 3c 01 	sts	0x013C, r24
					// PORTC |= 0x01;	// YELLOW
					usartCleanPacket();
     cf2:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
					mySys.chMode = SYSTEM_MODE_DATA_WAIT;	//	Finish Transmission and go back to idling
     cf6:	85 e0       	ldi	r24, 0x05	; 5
     cf8:	80 93 31 01 	sts	0x0131, r24
				}
			} 
			
			if ( myCOM.LoP == 0 && myCOM.PacketLength > 2 && myCOM.IsPacketCorrupt == 0) {
     cfc:	80 91 03 01 	lds	r24, 0x0103
     d00:	88 23       	and	r24, r24
     d02:	91 f4       	brne	.+36     	; 0xd28 <__vector_18+0x1c2>
     d04:	80 91 02 01 	lds	r24, 0x0102
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	70 f0       	brcs	.+28     	; 0xd28 <__vector_18+0x1c2>
     d0c:	80 91 2e 01 	lds	r24, 0x012E
     d10:	88 23       	and	r24, r24
     d12:	51 f4       	brne	.+20     	; 0xd28 <__vector_18+0x1c2>
				UCSR0B = 0b10001000;	// Rx Disabled. Rx Interrupt Enabled
     d14:	81 ec       	ldi	r24, 0xC1	; 193
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	28 e8       	ldi	r18, 0x88	; 136
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 83       	st	Z, r18
				mySys.chMode = SYSTEM_MODE_PROCESS;
     d1e:	10 92 31 01 	sts	0x0131, r1
				myCOM.PacketRxStatus = 2;	// Packet Rx Complete
     d22:	82 e0       	ldi	r24, 0x02	; 2
     d24:	80 93 01 01 	sts	0x0101, r24
			}
			
			// Reset main clock in order to avoid any overflow drama
			mySys.clkCount = 0;		// Reset clock
     d28:	10 92 32 01 	sts	0x0132, r1
     d2c:	10 92 33 01 	sts	0x0133, r1
     d30:	10 92 34 01 	sts	0x0134, r1
     d34:	10 92 35 01 	sts	0x0135, r1
			
			if ( myCOM.PacketLength == 1 ) {
     d38:	80 91 02 01 	lds	r24, 0x0102
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	29 f5       	brne	.+74     	; 0xd8a <__vector_18+0x224>
				if ( myCOM.PacketData[0] < 0xF0 || myCOM.PacketData[0] == 0xFE ) {
     d40:	80 91 07 01 	lds	r24, 0x0107
     d44:	80 3f       	cpi	r24, 0xF0	; 240
     d46:	20 f0       	brcs	.+8      	; 0xd50 <__vector_18+0x1ea>
     d48:	80 91 07 01 	lds	r24, 0x0107
     d4c:	8e 3f       	cpi	r24, 0xFE	; 254
     d4e:	e9 f4       	brne	.+58     	; 0xd8a <__vector_18+0x224>
					intRxDummy = UDR0;
     d50:	86 ec       	ldi	r24, 0xC6	; 198
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	fc 01       	movw	r30, r24
     d56:	80 81       	ld	r24, Z
     d58:	80 93 3c 01 	sts	0x013C, r24
					// PORTC |= 0x01;	// YELLOW
					
					// End of action, reset everything
					mySys.clkCount = 0;
     d5c:	10 92 32 01 	sts	0x0132, r1
     d60:	10 92 33 01 	sts	0x0133, r1
     d64:	10 92 34 01 	sts	0x0134, r1
     d68:	10 92 35 01 	sts	0x0135, r1
					usartCleanPacket();
     d6c:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
					mySys.chMode = SYSTEM_MODE_DATA_WAIT;	//	Finish Transmission and go back to idling
     d70:	85 e0       	ldi	r24, 0x05	; 5
     d72:	80 93 31 01 	sts	0x0131, r24
					UCSR0C = 0b00110110;
     d76:	82 ec       	ldi	r24, 0xC2	; 194
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	26 e3       	ldi	r18, 0x36	; 54
     d7c:	fc 01       	movw	r30, r24
     d7e:	20 83       	st	Z, r18
					UCSR0B = 0b10011000;	// Tx/Rx Enabled. Rx Interrupt Enabled
     d80:	81 ec       	ldi	r24, 0xC1	; 193
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	28 e9       	ldi	r18, 0x98	; 152
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
				}
			}
		} // Timeout omitted, might have to be placed on timer
	}	
	//PORTC &= ~(0x01);
}
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	bf 91       	pop	r27
     d94:	af 91       	pop	r26
     d96:	9f 91       	pop	r25
     d98:	8f 91       	pop	r24
     d9a:	7f 91       	pop	r23
     d9c:	6f 91       	pop	r22
     d9e:	5f 91       	pop	r21
     da0:	4f 91       	pop	r20
     da2:	3f 91       	pop	r19
     da4:	2f 91       	pop	r18
     da6:	0f 90       	pop	r0
     da8:	00 92 5f 00 	sts	0x005F, r0
     dac:	0f 90       	pop	r0
     dae:	1f 90       	pop	r1
     db0:	18 95       	reti

00000db2 <__vector_4>:
//////////////////////////////////////////////////////////////////////////
//	PCINT Interrupt Service Routine
//////////////////////////////////////////////////////////////////////////
volatile uint8_t portchistory = 0x00;     // default is LOW
ISR ( PCINT1_vect )
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	00 90 5f 00 	lds	r0, 0x005F
     dba:	0f 92       	push	r0
     dbc:	11 24       	eor	r1, r1
     dbe:	8f 93       	push	r24
     dc0:	9f 93       	push	r25
     dc2:	ef 93       	push	r30
     dc4:	ff 93       	push	r31
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <__vector_4+0x1a>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	uint8_t changedbits;
	uint8_t holder;
	
	holder = PINC;
     dd0:	86 e2       	ldi	r24, 0x26	; 38
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	fc 01       	movw	r30, r24
     dd6:	80 81       	ld	r24, Z
     dd8:	89 83       	std	Y+1, r24	; 0x01
	changedbits = holder & 0b00100000;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	80 72       	andi	r24, 0x20	; 32
     dde:	8a 83       	std	Y+2, r24	; 0x02
	changedbits ^= portchistory;
     de0:	80 91 00 01 	lds	r24, 0x0100
     de4:	9a 81       	ldd	r25, Y+2	; 0x02
     de6:	89 27       	eor	r24, r25
     de8:	8a 83       	std	Y+2, r24	; 0x02
	portchistory = holder;
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	80 93 00 01 	sts	0x0100, r24
	portchistory &= 0b00100000;
     df0:	80 91 00 01 	lds	r24, 0x0100
     df4:	80 72       	andi	r24, 0x20	; 32
     df6:	80 93 00 01 	sts	0x0100, r24
	
	if(changedbits & (1 << PINC5)) {
     dfa:	8a 81       	ldd	r24, Y+2	; 0x02
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	80 72       	andi	r24, 0x20	; 32
     e02:	99 27       	eor	r25, r25
     e04:	00 97       	sbiw	r24, 0x00	; 0
     e06:	79 f0       	breq	.+30     	; 0xe26 <__vector_4+0x74>
		/* PCINT13 changed */
		if( ( portchistory & (1 << PINC5 ) ) ) {   /// ####### CONTROLS: Divert 90-Degrees
     e08:	80 91 00 01 	lds	r24, 0x0100
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	80 72       	andi	r24, 0x20	; 32
     e12:	99 27       	eor	r25, r25
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	39 f0       	breq	.+14     	; 0xe26 <__vector_4+0x74>
			// Low to High Transition
			// Start to transmit the correct protocol until timed out
			
			if ( mySys.chMode == SYSTEM_MODE_PHOTOEYE ) {
     e18:	80 91 31 01 	lds	r24, 0x0131
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	19 f4       	brne	.+6      	; 0xe26 <__vector_4+0x74>
				//////////////////////////////////////////////////////////////////////////
				// *** The following are changes to the command as we make progress on duration
				
				myDivert.PhotoeyeTripped = 0xFF;
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	80 93 7d 01 	sts	0x017D, r24
		//eeprom_write_byte(eepromDEVICE_MEM_DUMP+i, *ramMemMap);
		//ramMemMap++;
	//}
	//
	
}
     e26:	0f 90       	pop	r0
     e28:	0f 90       	pop	r0
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	ff 91       	pop	r31
     e30:	ef 91       	pop	r30
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	0f 90       	pop	r0
     e38:	00 92 5f 00 	sts	0x005F, r0
     e3c:	0f 90       	pop	r0
     e3e:	1f 90       	pop	r1
     e40:	18 95       	reti

00000e42 <__vector_14>:

//////////////////////////////////////////////////////////////////////////
// Main Timer ISR
//////////////////////////////////////////////////////////////////////////
// 1kHz Timer ISR
ISR( TIMER0_COMPA_vect ) {
     e42:	1f 92       	push	r1
     e44:	0f 92       	push	r0
     e46:	00 90 5f 00 	lds	r0, 0x005F
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
	mySys.clkCount++;
     e6e:	80 91 32 01 	lds	r24, 0x0132
     e72:	90 91 33 01 	lds	r25, 0x0133
     e76:	a0 91 34 01 	lds	r26, 0x0134
     e7a:	b0 91 35 01 	lds	r27, 0x0135
     e7e:	01 96       	adiw	r24, 0x01	; 1
     e80:	a1 1d       	adc	r26, r1
     e82:	b1 1d       	adc	r27, r1
     e84:	80 93 32 01 	sts	0x0132, r24
     e88:	90 93 33 01 	sts	0x0133, r25
     e8c:	a0 93 34 01 	sts	0x0134, r26
     e90:	b0 93 35 01 	sts	0x0135, r27
	
	// Data Timeout
	if ( myCOM.PacketRxStatus == 1 ) {	// Determine if we are taking data timeout	(Currently Receiving a Packet)
     e94:	80 91 01 01 	lds	r24, 0x0101
     e98:	81 30       	cpi	r24, 0x01	; 1
     e9a:	c9 f4       	brne	.+50     	; 0xece <__vector_14+0x8c>
		if ( ( ( uint8_t ) ( mySys.clkCount ) ) > ( ( uint8_t ) systemBYTE_TIMEOUT ) ) {	// If data has been timed out
     e9c:	80 91 32 01 	lds	r24, 0x0132
     ea0:	90 91 33 01 	lds	r25, 0x0133
     ea4:	a0 91 34 01 	lds	r26, 0x0134
     ea8:	b0 91 35 01 	lds	r27, 0x0135
     eac:	85 30       	cpi	r24, 0x05	; 5
     eae:	78 f0       	brcs	.+30     	; 0xece <__vector_14+0x8c>
			myCOM.DroppedPackets++;		// Add to the Dropped Packet Count
     eb0:	80 91 29 01 	lds	r24, 0x0129
     eb4:	8f 5f       	subi	r24, 0xFF	; 255
     eb6:	80 93 29 01 	sts	0x0129, r24
			//eeprom_write_word(eepromCOM_RX_DEBUG + 3, ( ( uint8_t ) ( mySys.clkCount ) ));
			//eeprom_write_byte(eepromCOM_RX_DEBUG + 9, 0xDD );
			usartCleanPacket();
     eba:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
			mySys.chMode = SYSTEM_MODE_DATA_WAIT;	//	Finish Transmission and go back to idling
     ebe:	85 e0       	ldi	r24, 0x05	; 5
     ec0:	80 93 31 01 	sts	0x0131, r24
			UCSR0B = 0b10011000;	// Rx Enabled. Rx Interrupt Enabled
     ec4:	81 ec       	ldi	r24, 0xC1	; 193
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	28 e9       	ldi	r18, 0x98	; 152
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
		}
	}
}
     ece:	df 91       	pop	r29
     ed0:	cf 91       	pop	r28
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	00 92 5f 00 	sts	0x005F, r0
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <setup>:


//////////////////////////////////////////////////////////////////////////
//	Setup Function
//////////////////////////////////////////////////////////////////////////
void setup( void ) {
     ef6:	0f 93       	push	r16
     ef8:	1f 93       	push	r17
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	00 d0       	rcall	.+0      	; 0xf00 <setup+0xa>
     f00:	00 d0       	rcall	.+0      	; 0xf02 <setup+0xc>
     f02:	1f 92       	push	r1
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
	//eeprom_write_byte(eepromCOM_RX_SUCCESS, 0x00);
	//eeprom_write_byte(eepromCOM_RX_COUNT, 0x00);
	//eeprom_write_byte(eepromCOM_RX_COUNT+5, 0xFF);
	
	// Restart Network Statistics
	netStatHolder = eeprom_read_byte(eepromCOM_RX_CORRUPT);
     f08:	82 e5       	ldi	r24, 0x52	; 82
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	0e 94 08 0b 	call	0x1610	; 0x1610 <__eerd_byte_m328p>
     f10:	89 83       	std	Y+1, r24	; 0x01
	if ( netStatHolder == 0xFF ) {
     f12:	89 81       	ldd	r24, Y+1	; 0x01
     f14:	8f 3f       	cpi	r24, 0xFF	; 255
     f16:	29 f4       	brne	.+10     	; 0xf22 <setup+0x2c>
		eeprom_write_byte(eepromCOM_RX_CORRUPT, 0x00);
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	82 e5       	ldi	r24, 0x52	; 82
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
	}
	netStatHolder = eeprom_read_byte(eepromCOM_RX_DROPPED);
     f22:	81 e5       	ldi	r24, 0x51	; 81
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 08 0b 	call	0x1610	; 0x1610 <__eerd_byte_m328p>
     f2a:	89 83       	std	Y+1, r24	; 0x01
	if ( netStatHolder == 0xFF ) {
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	8f 3f       	cpi	r24, 0xFF	; 255
     f30:	29 f4       	brne	.+10     	; 0xf3c <setup+0x46>
		eeprom_write_byte(eepromCOM_RX_DROPPED, 0x00);
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	81 e5       	ldi	r24, 0x51	; 81
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
	}
	netStatHolder = eeprom_read_byte(eepromCOM_RX_SUCCESS);
     f3c:	80 e5       	ldi	r24, 0x50	; 80
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 08 0b 	call	0x1610	; 0x1610 <__eerd_byte_m328p>
     f44:	89 83       	std	Y+1, r24	; 0x01
	if ( netStatHolder == 0xFF ) {
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	8f 3f       	cpi	r24, 0xFF	; 255
     f4a:	29 f4       	brne	.+10     	; 0xf56 <setup+0x60>
		eeprom_write_byte(eepromCOM_RX_SUCCESS, 0x00);
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	80 e5       	ldi	r24, 0x50	; 80
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
	}
	netStatHolder = eeprom_read_byte(eepromCOM_RX_COUNT);
     f56:	80 e9       	ldi	r24, 0x90	; 144
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 08 0b 	call	0x1610	; 0x1610 <__eerd_byte_m328p>
     f5e:	89 83       	std	Y+1, r24	; 0x01
	if ( netStatHolder == 0xFF ) {
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	8f 3f       	cpi	r24, 0xFF	; 255
     f64:	29 f4       	brne	.+10     	; 0xf70 <setup+0x7a>
		eeprom_write_byte(eepromCOM_RX_COUNT, 0x00);
     f66:	60 e0       	ldi	r22, 0x00	; 0
     f68:	80 e9       	ldi	r24, 0x90	; 144
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
	}
	
	
	// System Variable Initialization
	mySys.clkCount = 0;	// Back to zero counts
     f70:	10 92 32 01 	sts	0x0132, r1
     f74:	10 92 33 01 	sts	0x0133, r1
     f78:	10 92 34 01 	sts	0x0134, r1
     f7c:	10 92 35 01 	sts	0x0135, r1
	mySys.devAddress = 0;
     f80:	10 92 2f 01 	sts	0x012F, r1
	mySys.chMode = SYSTEM_MODE_DATA_WAIT;
     f84:	85 e0       	ldi	r24, 0x05	; 5
     f86:	80 93 31 01 	sts	0x0131, r24
	mySys.chTran = BOARD_TYPE_DIVERT;
     f8a:	10 92 30 01 	sts	0x0130, r1
	
	// Communication Variable Intialization
	myCOM.CorruptPackets = 0;
     f8e:	10 92 2d 01 	sts	0x012D, r1
	myCOM.DroppedPackets = 0;
     f92:	10 92 29 01 	sts	0x0129, r1
	myCOM.RxPackets = 0;		// Reset Network Statistics
     f96:	10 92 2b 01 	sts	0x012B, r1
	myCOM.PreviousCorruptPackets = 0;
     f9a:	10 92 2c 01 	sts	0x012C, r1
	myCOM.PreviousDroppedPackets = 0;
     f9e:	10 92 28 01 	sts	0x0128, r1
	myCOM.PreviousRxPackets = 0;
     fa2:	10 92 2a 01 	sts	0x012A, r1
	usartCleanPacket();
     fa6:	0e 94 99 09 	call	0x1332	; 0x1332 <usartCleanPacket>
	
	// Determine the type of transmitter that this is supposed to be
		// Get the code number of the swtiches on board
	DDRC = 0b00000000;	// All as inputs
     faa:	87 e2       	ldi	r24, 0x27	; 39
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	fc 01       	movw	r30, r24
     fb0:	10 82       	st	Z, r1
	PORTC = 0x0F;		// Set the pull-up resistors
     fb2:	88 e2       	ldi	r24, 0x28	; 40
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	2f e0       	ldi	r18, 0x0F	; 15
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
	mySys.devAddress = PINC & 0x0F;		// Obtain the device address selected
     fbc:	86 e2       	ldi	r24, 0x26	; 38
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 70       	andi	r24, 0x0F	; 15
     fc6:	80 93 2f 01 	sts	0x012F, r24
	//mySys.devAddress = 0x02;
	//PORTC = 0;
	//////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////////////////////////////
	// Store the address for debugging purposes
	eeprom_write_byte(eepromDEVICE_ID, mySys.devAddress);
     fca:	80 91 2f 01 	lds	r24, 0x012F
     fce:	68 2f       	mov	r22, r24
     fd0:	80 e1       	ldi	r24, 0x10	; 16
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
	// Populate the Transmitter Mode
	if ( mySys.devAddress > 0 ) {
     fd8:	80 91 2f 01 	lds	r24, 0x012F
     fdc:	88 23       	and	r24, r24
     fde:	19 f0       	breq	.+6      	; 0xfe6 <setup+0xf0>
		mySys.chTran = BOARD_TYPE_DIVERT;	 // This is a Diverting Transmitter
     fe0:	10 92 30 01 	sts	0x0130, r1
     fe4:	03 c0       	rjmp	.+6      	; 0xfec <setup+0xf6>
	} else {
		mySys.chTran = BOARD_TYPE_PARAMETER;	 // This is a Programmer Transmitter
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	80 93 30 01 	sts	0x0130, r24
	}
	
	//////////////////////////////////////////////////////////////////////////
	// CONVYOR SPEED and TIMING SETUP AND AUTO-INITIALIZATION
	//////////////////////////////////////////////////////////////////////////
	mySys.ConveyorSpeedByte = eeprom_read_byte(eepromSYS_CONVEYOR_SPEED);
     fec:	80 e7       	ldi	r24, 0x70	; 112
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 08 0b 	call	0x1610	; 0x1610 <__eerd_byte_m328p>
     ff4:	80 93 37 01 	sts	0x0137, r24
	if ( mySys.ConveyorSpeedByte == 0xFF ) {	// Auto Initialization to Default Values 
     ff8:	80 91 37 01 	lds	r24, 0x0137
     ffc:	8f 3f       	cpi	r24, 0xFF	; 255
     ffe:	51 f4       	brne	.+20     	; 0x1014 <setup+0x11e>
		mySys.ConveyorSpeedByte = 0x30;	// Initialize the right speed
    1000:	80 e3       	ldi	r24, 0x30	; 48
    1002:	80 93 37 01 	sts	0x0137, r24
		eeprom_write_byte(eepromSYS_CONVEYOR_SPEED, mySys.ConveyorSpeedByte);	// Store Default
    1006:	80 91 37 01 	lds	r24, 0x0137
    100a:	68 2f       	mov	r22, r24
    100c:	80 e7       	ldi	r24, 0x70	; 112
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
	}
	//mySys.ConveyorSpeedByte = 0x00;	// Initialize the right speed
	mySys.ConveyorSpeed = ( mySys.ConveyorSpeedByte * 5 ) + 60;	// Obtain on ft/min
    1014:	80 91 37 01 	lds	r24, 0x0137
    1018:	28 2f       	mov	r18, r24
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	c9 01       	movw	r24, r18
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	cc 96       	adiw	r24, 0x3c	; 60
    102c:	90 93 39 01 	sts	0x0139, r25
    1030:	80 93 38 01 	sts	0x0138, r24
	
	myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( float ) mySys.ConveyorSpeed ) * ( ( float ) mathTO_MM_SEC ) );
    1034:	80 91 38 01 	lds	r24, 0x0138
    1038:	90 91 39 01 	lds	r25, 0x0139
    103c:	cc 01       	movw	r24, r24
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__floatunsisf>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	2c e5       	ldi	r18, 0x5C	; 92
    1050:	3f e8       	ldi	r19, 0x8F	; 143
    1052:	42 ea       	ldi	r20, 0xA2	; 162
    1054:	50 e4       	ldi	r21, 0x40	; 64
    1056:	bc 01       	movw	r22, r24
    1058:	cd 01       	movw	r24, r26
    105a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
    105e:	dc 01       	movw	r26, r24
    1060:	cb 01       	movw	r24, r22
    1062:	bc 01       	movw	r22, r24
    1064:	cd 01       	movw	r24, r26
    1066:	0e 94 af 09 	call	0x135e	; 0x135e <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	90 93 5d 01 	sts	0x015D, r25
    1072:	80 93 5c 01 	sts	0x015C, r24
	myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( uint32_t ) mathSLAT_WIDTH ) / ( ( uint32_t ) myDivert.SlatTravelTimes[0] ) );
    1076:	80 91 5c 01 	lds	r24, 0x015C
    107a:	90 91 5d 01 	lds	r25, 0x015D
    107e:	9c 01       	movw	r18, r24
    1080:	40 e0       	ldi	r20, 0x00	; 0
    1082:	50 e0       	ldi	r21, 0x00	; 0
    1084:	8e e1       	ldi	r24, 0x1E	; 30
    1086:	9c e6       	ldi	r25, 0x6C	; 108
    1088:	a2 e0       	ldi	r26, 0x02	; 2
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	bc 01       	movw	r22, r24
    108e:	cd 01       	movw	r24, r26
    1090:	0e 94 cc 0a 	call	0x1598	; 0x1598 <__udivmodsi4>
    1094:	da 01       	movw	r26, r20
    1096:	c9 01       	movw	r24, r18
    1098:	90 93 5d 01 	sts	0x015D, r25
    109c:	80 93 5c 01 	sts	0x015C, r24
	for ( myDivert.i=1;myDivert.i<7;myDivert.i++ ) {
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 6a 01 	sts	0x016A, r24
    10a6:	22 c0       	rjmp	.+68     	; 0x10ec <setup+0x1f6>
		myDivert.SlatTravelTimes[myDivert.i] = myDivert.SlatTravelTimes[0] * (1 + myDivert.i);
    10a8:	80 91 6a 01 	lds	r24, 0x016A
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	60 91 5c 01 	lds	r22, 0x015C
    10b4:	70 91 5d 01 	lds	r23, 0x015D
    10b8:	20 91 6a 01 	lds	r18, 0x016A
    10bc:	22 2f       	mov	r18, r18
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	2f 5f       	subi	r18, 0xFF	; 255
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	a9 01       	movw	r20, r18
    10c6:	64 9f       	mul	r22, r20
    10c8:	90 01       	movw	r18, r0
    10ca:	65 9f       	mul	r22, r21
    10cc:	30 0d       	add	r19, r0
    10ce:	74 9f       	mul	r23, r20
    10d0:	30 0d       	add	r19, r0
    10d2:	11 24       	eor	r1, r1
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	84 5a       	subi	r24, 0xA4	; 164
    10da:	9e 4f       	sbci	r25, 0xFE	; 254
    10dc:	fc 01       	movw	r30, r24
    10de:	31 83       	std	Z+1, r19	; 0x01
    10e0:	20 83       	st	Z, r18
	//mySys.ConveyorSpeedByte = 0x00;	// Initialize the right speed
	mySys.ConveyorSpeed = ( mySys.ConveyorSpeedByte * 5 ) + 60;	// Obtain on ft/min
	
	myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( float ) mySys.ConveyorSpeed ) * ( ( float ) mathTO_MM_SEC ) );
	myDivert.SlatTravelTimes[0] = ( uint16_t ) ( ( ( uint32_t ) mathSLAT_WIDTH ) / ( ( uint32_t ) myDivert.SlatTravelTimes[0] ) );
	for ( myDivert.i=1;myDivert.i<7;myDivert.i++ ) {
    10e2:	80 91 6a 01 	lds	r24, 0x016A
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 6a 01 	sts	0x016A, r24
    10ec:	80 91 6a 01 	lds	r24, 0x016A
    10f0:	87 30       	cpi	r24, 0x07	; 7
    10f2:	d0 f2       	brcs	.-76     	; 0x10a8 <setup+0x1b2>
		myDivert.SlatTravelTimes[myDivert.i] = myDivert.SlatTravelTimes[0] * (1 + myDivert.i);
	}
	eeprom_write_word(eepromSYS_CONVEYOR_SPEED+5,myDivert.SlatTravelTimes[0]);	// Debug
    10f4:	80 91 5c 01 	lds	r24, 0x015C
    10f8:	90 91 5d 01 	lds	r25, 0x015D
    10fc:	bc 01       	movw	r22, r24
    10fe:	85 e7       	ldi	r24, 0x75	; 117
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__eewr_word_m328p>
	//myDivert.ProgrammingDuration = ( ( uint32_t ) 70 * ( uint32_t ) myDivert.SlatTravelTimes[0] );
	myDivert.ProgrammingDuration = ( ( uint32_t ) 300 * ( uint32_t ) myDivert.SlatTravelTimes[0] );
    1106:	80 91 5c 01 	lds	r24, 0x015C
    110a:	90 91 5d 01 	lds	r25, 0x015D
    110e:	9c 01       	movw	r18, r24
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	8c e2       	ldi	r24, 0x2C	; 44
    1116:	91 e0       	ldi	r25, 0x01	; 1
    1118:	dc 01       	movw	r26, r24
    111a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <__muluhisi3>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	80 93 6f 01 	sts	0x016F, r24
    1126:	90 93 70 01 	sts	0x0170, r25
    112a:	a0 93 71 01 	sts	0x0171, r26
    112e:	b0 93 72 01 	sts	0x0172, r27
	myDivert.DivertDirection = 0x00;	// Default Divert Direction
    1132:	10 92 7e 01 	sts	0x017E, r1
	
	myCOM.ConveyorSpeed = mySys.ConveyorSpeedByte;
    1136:	80 91 37 01 	lds	r24, 0x0137
    113a:	80 93 25 01 	sts	0x0125, r24
	myCOM.RURD = 0b01010000;			// These are Constants
    113e:	80 e5       	ldi	r24, 0x50	; 80
    1140:	80 93 26 01 	sts	0x0126, r24
	myCOM.DivertDelay = 0b01100111;		// This is a Constant-Minimum
    1144:	87 e6       	ldi	r24, 0x67	; 103
    1146:	80 93 27 01 	sts	0x0127, r24
	mySys.PhotoeyeDelayWindow = 300;	// Delay of 300ms
    114a:	8c e2       	ldi	r24, 0x2C	; 44
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	90 93 3b 01 	sts	0x013B, r25
    1152:	80 93 3a 01 	sts	0x013A, r24
	
		// Diverting Table Values ( Auto Settings to default )
	for ( myDivert.i=0;myDivert.i<28;myDivert.i++ ) {
    1156:	10 92 6a 01 	sts	0x016A, r1
    115a:	31 c0       	rjmp	.+98     	; 0x11be <setup+0x2c8>
		myDivert.tblDivertData[myDivert.i] = eeprom_read_byte(eepromDYV_TABLE_VALUES + myDivert.i );
    115c:	80 91 6a 01 	lds	r24, 0x016A
    1160:	08 2f       	mov	r16, r24
    1162:	10 e0       	ldi	r17, 0x00	; 0
    1164:	80 91 6a 01 	lds	r24, 0x016A
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	93 95       	inc	r25
    116e:	0e 94 08 0b 	call	0x1610	; 0x1610 <__eerd_byte_m328p>
    1172:	28 2f       	mov	r18, r24
    1174:	c8 01       	movw	r24, r16
    1176:	81 5c       	subi	r24, 0xC1	; 193
    1178:	9e 4f       	sbci	r25, 0xFE	; 254
    117a:	fc 01       	movw	r30, r24
    117c:	20 83       	st	Z, r18
		if ( myDivert.tblDivertData[myDivert.i] == 0xFF ) {	
    117e:	80 91 6a 01 	lds	r24, 0x016A
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	81 5c       	subi	r24, 0xC1	; 193
    1188:	9e 4f       	sbci	r25, 0xFE	; 254
    118a:	fc 01       	movw	r30, r24
    118c:	80 81       	ld	r24, Z
    118e:	8f 3f       	cpi	r24, 0xFF	; 255
    1190:	89 f4       	brne	.+34     	; 0x11b4 <setup+0x2be>
			// Overwrite Byte if not initialized
			myDivert.tblDivertData[myDivert.i] = dataDEFAULT_COMMAND;
    1192:	80 91 6a 01 	lds	r24, 0x016A
    1196:	88 2f       	mov	r24, r24
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	81 5c       	subi	r24, 0xC1	; 193
    119c:	9e 4f       	sbci	r25, 0xFE	; 254
    119e:	27 e8       	ldi	r18, 0x87	; 135
    11a0:	fc 01       	movw	r30, r24
    11a2:	20 83       	st	Z, r18
			eeprom_write_byte( eepromDYV_TABLE_VALUES + myDivert.i, dataDEFAULT_COMMAND);
    11a4:	80 91 6a 01 	lds	r24, 0x016A
    11a8:	88 2f       	mov	r24, r24
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	93 95       	inc	r25
    11ae:	67 e8       	ldi	r22, 0x87	; 135
    11b0:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
	myCOM.RURD = 0b01010000;			// These are Constants
	myCOM.DivertDelay = 0b01100111;		// This is a Constant-Minimum
	mySys.PhotoeyeDelayWindow = 300;	// Delay of 300ms
	
		// Diverting Table Values ( Auto Settings to default )
	for ( myDivert.i=0;myDivert.i<28;myDivert.i++ ) {
    11b4:	80 91 6a 01 	lds	r24, 0x016A
    11b8:	8f 5f       	subi	r24, 0xFF	; 255
    11ba:	80 93 6a 01 	sts	0x016A, r24
    11be:	80 91 6a 01 	lds	r24, 0x016A
    11c2:	8c 31       	cpi	r24, 0x1C	; 28
    11c4:	58 f2       	brcs	.-106    	; 0x115c <setup+0x266>
			myDivert.tblDivertData[myDivert.i] = dataDEFAULT_COMMAND;
			eeprom_write_byte( eepromDYV_TABLE_VALUES + myDivert.i, dataDEFAULT_COMMAND);
		}
	}
	
	mySys.PhotoeyeDelayWindow = eeprom_read_word(eepromPEYE_TIMEOUT);
    11c6:	80 e6       	ldi	r24, 0x60	; 96
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 10 0b 	call	0x1620	; 0x1620 <__eerd_word_m328p>
    11ce:	90 93 3b 01 	sts	0x013B, r25
    11d2:	80 93 3a 01 	sts	0x013A, r24
	if ( mySys.PhotoeyeDelayWindow == ( uint16_t ) 0xFFFF || mySys.PhotoeyeDelayWindow == ( uint16_t ) 0x0000 ) {
    11d6:	80 91 3a 01 	lds	r24, 0x013A
    11da:	90 91 3b 01 	lds	r25, 0x013B
    11de:	8f 3f       	cpi	r24, 0xFF	; 255
    11e0:	ff ef       	ldi	r31, 0xFF	; 255
    11e2:	9f 07       	cpc	r25, r31
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <setup+0x2fc>
    11e6:	80 91 3a 01 	lds	r24, 0x013A
    11ea:	90 91 3b 01 	lds	r25, 0x013B
    11ee:	00 97       	sbiw	r24, 0x00	; 0
    11f0:	79 f4       	brne	.+30     	; 0x1210 <setup+0x31a>
		// Reset the value to the default 300ms
		mySys.PhotoeyeDelayWindow = 300;	// Default value
    11f2:	8c e2       	ldi	r24, 0x2C	; 44
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	90 93 3b 01 	sts	0x013B, r25
    11fa:	80 93 3a 01 	sts	0x013A, r24
		eeprom_write_word(eepromPEYE_TIMEOUT, mySys.PhotoeyeDelayWindow);
    11fe:	80 91 3a 01 	lds	r24, 0x013A
    1202:	90 91 3b 01 	lds	r25, 0x013B
    1206:	bc 01       	movw	r22, r24
    1208:	80 e6       	ldi	r24, 0x60	; 96
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <__eewr_word_m328p>
	}
	
	// Packet info initialization
	myDivert.irPacketLength = 0;
    1210:	10 92 6d 01 	sts	0x016D, r1
	myDivert.irSendPacket = 0xFF; // Yes, ready to send packet
    1214:	8f ef       	ldi	r24, 0xFF	; 255
    1216:	80 93 6e 01 	sts	0x016E, r24
	
	//////////////////////////////////////////////////////////////////////////
	//	# System Timer Setup ( Timer 0 as a 1kHz Interrupt )
	//////////////////////////////////////////////////////////////////////////
	TCNT0=0x00;
    121a:	86 e4       	ldi	r24, 0x46	; 70
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	fc 01       	movw	r30, r24
    1220:	10 82       	st	Z, r1
	OCR0A = 249;
    1222:	87 e4       	ldi	r24, 0x47	; 71
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	29 ef       	ldi	r18, 0xF9	; 249
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
	TCCR0A = 0x03;
    122c:	84 e4       	ldi	r24, 0x44	; 68
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	23 e0       	ldi	r18, 0x03	; 3
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
	TCCR0B |= 0x0B;
    1236:	85 e4       	ldi	r24, 0x45	; 69
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	25 e4       	ldi	r18, 0x45	; 69
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	f9 01       	movw	r30, r18
    1240:	20 81       	ld	r18, Z
    1242:	2b 60       	ori	r18, 0x0B	; 11
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18
	TIMSK0 |= 0x0A;		// End of timer 0 Setup
    1248:	8e e6       	ldi	r24, 0x6E	; 110
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	2e e6       	ldi	r18, 0x6E	; 110
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	f9 01       	movw	r30, r18
    1252:	20 81       	ld	r18, Z
    1254:	2a 60       	ori	r18, 0x0A	; 10
    1256:	fc 01       	movw	r30, r24
    1258:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	//	PWM Setup
	//////////////////////////////////////////////////////////////////////////
	DDRB |= 0b00000101;
    125a:	84 e2       	ldi	r24, 0x24	; 36
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	24 e2       	ldi	r18, 0x24	; 36
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	f9 01       	movw	r30, r18
    1264:	20 81       	ld	r18, Z
    1266:	25 60       	ori	r18, 0x05	; 5
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
	ICR1 = 285;
    126c:	86 e8       	ldi	r24, 0x86	; 134
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	2d e1       	ldi	r18, 0x1D	; 29
    1272:	31 e0       	ldi	r19, 0x01	; 1
    1274:	fc 01       	movw	r30, r24
    1276:	31 83       	std	Z+1, r19	; 0x01
    1278:	20 83       	st	Z, r18
	TCCR1A = 0b00100010;
    127a:	80 e8       	ldi	r24, 0x80	; 128
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	22 e2       	ldi	r18, 0x22	; 34
    1280:	fc 01       	movw	r30, r24
    1282:	20 83       	st	Z, r18
	TCCR1B = 0b00011001;
    1284:	81 e8       	ldi	r24, 0x81	; 129
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	29 e1       	ldi	r18, 0x19	; 25
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
	OCR1B = 143;	// 50 % Duty Cycle
    128e:	8a e8       	ldi	r24, 0x8A	; 138
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	2f e8       	ldi	r18, 0x8F	; 143
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	fc 01       	movw	r30, r24
    1298:	31 83       	std	Z+1, r19	; 0x01
    129a:	20 83       	st	Z, r18
	//////////////////////////////////////////////////////////////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// SERIAL Communication Setup
	//////////////////////////////////////////////////////////////////////////
	PORTB &= 0b11111110;
    129c:	85 e2       	ldi	r24, 0x25	; 37
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	25 e2       	ldi	r18, 0x25	; 37
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	f9 01       	movw	r30, r18
    12a6:	20 81       	ld	r18, Z
    12a8:	2e 7f       	andi	r18, 0xFE	; 254
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
	DDRD |= 0b00000010;
    12ae:	8a e2       	ldi	r24, 0x2A	; 42
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	2a e2       	ldi	r18, 0x2A	; 42
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	f9 01       	movw	r30, r18
    12b8:	20 81       	ld	r18, Z
    12ba:	22 60       	ori	r18, 0x02	; 2
    12bc:	fc 01       	movw	r30, r24
    12be:	20 83       	st	Z, r18
	DDRD &= 0b11111110;
    12c0:	8a e2       	ldi	r24, 0x2A	; 42
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	2a e2       	ldi	r18, 0x2A	; 42
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	f9 01       	movw	r30, r18
    12ca:	20 81       	ld	r18, Z
    12cc:	2e 7f       	andi	r18, 0xFE	; 254
    12ce:	fc 01       	movw	r30, r24
    12d0:	20 83       	st	Z, r18
	UBRR0H = (uint8_t)(BAUD_PRESCALLER>>8);
    12d2:	85 ec       	ldi	r24, 0xC5	; 197
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	fc 01       	movw	r30, r24
    12d8:	10 82       	st	Z, r1
	UBRR0L = (uint8_t)(BAUD_PRESCALLER);
    12da:	84 ec       	ldi	r24, 0xC4	; 196
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	2f ec       	ldi	r18, 0xCF	; 207
    12e0:	fc 01       	movw	r30, r24
    12e2:	20 83       	st	Z, r18
	
	UCSR0C = 0b00110110;
    12e4:	82 ec       	ldi	r24, 0xC2	; 194
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	26 e3       	ldi	r18, 0x36	; 54
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
	UCSR0B = 0b10011000;	// Tx/Rx Enabled. Rx Interrupt Enabled
    12ee:	81 ec       	ldi	r24, 0xC1	; 193
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	28 e9       	ldi	r18, 0x98	; 152
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 83       	st	Z, r18
	/////////////////////////// END SERIAL COMMUNICATION SETUP ////////////////
	
	//////////////////////////////////////////////////////////////////////////
	// PCINT ISR SETUP
	//////////////////////////////////////////////////////////////////////////
	PCICR |= ( 1 << PCIE1 );	// Set PCIE0 to enable PCMSK0 scan
    12f8:	88 e6       	ldi	r24, 0x68	; 104
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	28 e6       	ldi	r18, 0x68	; 104
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	f9 01       	movw	r30, r18
    1302:	20 81       	ld	r18, Z
    1304:	22 60       	ori	r18, 0x02	; 2
    1306:	fc 01       	movw	r30, r24
    1308:	20 83       	st	Z, r18
	PCMSK1 |= ( 1 << PCINT13 );	// Set the PCINT0 to trigger an interrupt on state change
    130a:	8c e6       	ldi	r24, 0x6C	; 108
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	2c e6       	ldi	r18, 0x6C	; 108
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	f9 01       	movw	r30, r18
    1314:	20 81       	ld	r18, Z
    1316:	20 62       	ori	r18, 0x20	; 32
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18
	/////////////////////////// END PCINT ISR SETUP //////////////////////////
	
	// Enable interrupts
	sei();
    131c:	78 94       	sei
}
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <usartCleanPacket>:

//////////////////////////////////////////////////////////////////////////
// USART Utility: Packet Information Resetter
//////////////////////////////////////////////////////////////////////////
void usartCleanPacket( void ) {
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
	myCOM.PacketRxStatus = 0;	// We are waiting for data/packet
    133a:	10 92 01 01 	sts	0x0101, r1
	myCOM.IsPacketCorrupt = 0;	// Packet is not corrupt
    133e:	10 92 2e 01 	sts	0x012E, r1
	myCOM.PacketLength = 0;		// Reset Packet data: No bytes on current packet
    1342:	10 92 02 01 	sts	0x0102, r1
	myCOM.LoP = 0xFF;				// Reset Packet data: Back to DC on Last-Of-Packet
    1346:	8f ef       	ldi	r24, 0xFF	; 255
    1348:	80 93 03 01 	sts	0x0103, r24
	myCOM.TimeoutTickCount = 0;	// Reset the Timeout Counter
    134c:	10 92 05 01 	sts	0x0105, r1
    1350:	10 92 04 01 	sts	0x0104, r1
	myCOM.PacketRxStatus = 0;	// We are waiting for data/packet
    1354:	10 92 01 01 	sts	0x0101, r1
	
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	08 95       	ret

0000135e <__fixunssfsi>:
    135e:	70 d0       	rcall	.+224    	; 0x1440 <__fp_splitA>
    1360:	88 f0       	brcs	.+34     	; 0x1384 <__fixunssfsi+0x26>
    1362:	9f 57       	subi	r25, 0x7F	; 127
    1364:	90 f0       	brcs	.+36     	; 0x138a <__fixunssfsi+0x2c>
    1366:	b9 2f       	mov	r27, r25
    1368:	99 27       	eor	r25, r25
    136a:	b7 51       	subi	r27, 0x17	; 23
    136c:	a0 f0       	brcs	.+40     	; 0x1396 <__fixunssfsi+0x38>
    136e:	d1 f0       	breq	.+52     	; 0x13a4 <__fixunssfsi+0x46>
    1370:	66 0f       	add	r22, r22
    1372:	77 1f       	adc	r23, r23
    1374:	88 1f       	adc	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	1a f0       	brmi	.+6      	; 0x1380 <__fixunssfsi+0x22>
    137a:	ba 95       	dec	r27
    137c:	c9 f7       	brne	.-14     	; 0x1370 <__fixunssfsi+0x12>
    137e:	12 c0       	rjmp	.+36     	; 0x13a4 <__fixunssfsi+0x46>
    1380:	b1 30       	cpi	r27, 0x01	; 1
    1382:	81 f0       	breq	.+32     	; 0x13a4 <__fixunssfsi+0x46>
    1384:	77 d0       	rcall	.+238    	; 0x1474 <__fp_zero>
    1386:	b1 e0       	ldi	r27, 0x01	; 1
    1388:	08 95       	ret
    138a:	74 c0       	rjmp	.+232    	; 0x1474 <__fp_zero>
    138c:	67 2f       	mov	r22, r23
    138e:	78 2f       	mov	r23, r24
    1390:	88 27       	eor	r24, r24
    1392:	b8 5f       	subi	r27, 0xF8	; 248
    1394:	39 f0       	breq	.+14     	; 0x13a4 <__fixunssfsi+0x46>
    1396:	b9 3f       	cpi	r27, 0xF9	; 249
    1398:	cc f3       	brlt	.-14     	; 0x138c <__fixunssfsi+0x2e>
    139a:	86 95       	lsr	r24
    139c:	77 95       	ror	r23
    139e:	67 95       	ror	r22
    13a0:	b3 95       	inc	r27
    13a2:	d9 f7       	brne	.-10     	; 0x139a <__fixunssfsi+0x3c>
    13a4:	3e f4       	brtc	.+14     	; 0x13b4 <__fixunssfsi+0x56>
    13a6:	90 95       	com	r25
    13a8:	80 95       	com	r24
    13aa:	70 95       	com	r23
    13ac:	61 95       	neg	r22
    13ae:	7f 4f       	sbci	r23, 0xFF	; 255
    13b0:	8f 4f       	sbci	r24, 0xFF	; 255
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255
    13b4:	08 95       	ret

000013b6 <__floatunsisf>:
    13b6:	e8 94       	clt
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <__floatsisf+0x12>

000013ba <__floatsisf>:
    13ba:	97 fb       	bst	r25, 7
    13bc:	3e f4       	brtc	.+14     	; 0x13cc <__floatsisf+0x12>
    13be:	90 95       	com	r25
    13c0:	80 95       	com	r24
    13c2:	70 95       	com	r23
    13c4:	61 95       	neg	r22
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	99 23       	and	r25, r25
    13ce:	a9 f0       	breq	.+42     	; 0x13fa <__floatsisf+0x40>
    13d0:	f9 2f       	mov	r31, r25
    13d2:	96 e9       	ldi	r25, 0x96	; 150
    13d4:	bb 27       	eor	r27, r27
    13d6:	93 95       	inc	r25
    13d8:	f6 95       	lsr	r31
    13da:	87 95       	ror	r24
    13dc:	77 95       	ror	r23
    13de:	67 95       	ror	r22
    13e0:	b7 95       	ror	r27
    13e2:	f1 11       	cpse	r31, r1
    13e4:	f8 cf       	rjmp	.-16     	; 0x13d6 <__floatsisf+0x1c>
    13e6:	fa f4       	brpl	.+62     	; 0x1426 <__floatsisf+0x6c>
    13e8:	bb 0f       	add	r27, r27
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <__floatsisf+0x36>
    13ec:	60 ff       	sbrs	r22, 0
    13ee:	1b c0       	rjmp	.+54     	; 0x1426 <__floatsisf+0x6c>
    13f0:	6f 5f       	subi	r22, 0xFF	; 255
    13f2:	7f 4f       	sbci	r23, 0xFF	; 255
    13f4:	8f 4f       	sbci	r24, 0xFF	; 255
    13f6:	9f 4f       	sbci	r25, 0xFF	; 255
    13f8:	16 c0       	rjmp	.+44     	; 0x1426 <__floatsisf+0x6c>
    13fa:	88 23       	and	r24, r24
    13fc:	11 f0       	breq	.+4      	; 0x1402 <__floatsisf+0x48>
    13fe:	96 e9       	ldi	r25, 0x96	; 150
    1400:	11 c0       	rjmp	.+34     	; 0x1424 <__floatsisf+0x6a>
    1402:	77 23       	and	r23, r23
    1404:	21 f0       	breq	.+8      	; 0x140e <__floatsisf+0x54>
    1406:	9e e8       	ldi	r25, 0x8E	; 142
    1408:	87 2f       	mov	r24, r23
    140a:	76 2f       	mov	r23, r22
    140c:	05 c0       	rjmp	.+10     	; 0x1418 <__floatsisf+0x5e>
    140e:	66 23       	and	r22, r22
    1410:	71 f0       	breq	.+28     	; 0x142e <__floatsisf+0x74>
    1412:	96 e8       	ldi	r25, 0x86	; 134
    1414:	86 2f       	mov	r24, r22
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	2a f0       	brmi	.+10     	; 0x1426 <__floatsisf+0x6c>
    141c:	9a 95       	dec	r25
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	88 1f       	adc	r24, r24
    1424:	da f7       	brpl	.-10     	; 0x141c <__floatsisf+0x62>
    1426:	88 0f       	add	r24, r24
    1428:	96 95       	lsr	r25
    142a:	87 95       	ror	r24
    142c:	97 f9       	bld	r25, 7
    142e:	08 95       	ret

00001430 <__fp_split3>:
    1430:	57 fd       	sbrc	r21, 7
    1432:	90 58       	subi	r25, 0x80	; 128
    1434:	44 0f       	add	r20, r20
    1436:	55 1f       	adc	r21, r21
    1438:	59 f0       	breq	.+22     	; 0x1450 <__fp_splitA+0x10>
    143a:	5f 3f       	cpi	r21, 0xFF	; 255
    143c:	71 f0       	breq	.+28     	; 0x145a <__fp_splitA+0x1a>
    143e:	47 95       	ror	r20

00001440 <__fp_splitA>:
    1440:	88 0f       	add	r24, r24
    1442:	97 fb       	bst	r25, 7
    1444:	99 1f       	adc	r25, r25
    1446:	61 f0       	breq	.+24     	; 0x1460 <__fp_splitA+0x20>
    1448:	9f 3f       	cpi	r25, 0xFF	; 255
    144a:	79 f0       	breq	.+30     	; 0x146a <__fp_splitA+0x2a>
    144c:	87 95       	ror	r24
    144e:	08 95       	ret
    1450:	12 16       	cp	r1, r18
    1452:	13 06       	cpc	r1, r19
    1454:	14 06       	cpc	r1, r20
    1456:	55 1f       	adc	r21, r21
    1458:	f2 cf       	rjmp	.-28     	; 0x143e <__fp_split3+0xe>
    145a:	46 95       	lsr	r20
    145c:	f1 df       	rcall	.-30     	; 0x1440 <__fp_splitA>
    145e:	08 c0       	rjmp	.+16     	; 0x1470 <__fp_splitA+0x30>
    1460:	16 16       	cp	r1, r22
    1462:	17 06       	cpc	r1, r23
    1464:	18 06       	cpc	r1, r24
    1466:	99 1f       	adc	r25, r25
    1468:	f1 cf       	rjmp	.-30     	; 0x144c <__fp_splitA+0xc>
    146a:	86 95       	lsr	r24
    146c:	71 05       	cpc	r23, r1
    146e:	61 05       	cpc	r22, r1
    1470:	08 94       	sec
    1472:	08 95       	ret

00001474 <__fp_zero>:
    1474:	e8 94       	clt

00001476 <__fp_szero>:
    1476:	bb 27       	eor	r27, r27
    1478:	66 27       	eor	r22, r22
    147a:	77 27       	eor	r23, r23
    147c:	cb 01       	movw	r24, r22
    147e:	97 f9       	bld	r25, 7
    1480:	08 95       	ret

00001482 <__mulsf3>:
    1482:	0b d0       	rcall	.+22     	; 0x149a <__mulsf3x>
    1484:	78 c0       	rjmp	.+240    	; 0x1576 <__fp_round>
    1486:	69 d0       	rcall	.+210    	; 0x155a <__fp_pscA>
    1488:	28 f0       	brcs	.+10     	; 0x1494 <__mulsf3+0x12>
    148a:	6e d0       	rcall	.+220    	; 0x1568 <__fp_pscB>
    148c:	18 f0       	brcs	.+6      	; 0x1494 <__mulsf3+0x12>
    148e:	95 23       	and	r25, r21
    1490:	09 f0       	breq	.+2      	; 0x1494 <__mulsf3+0x12>
    1492:	5a c0       	rjmp	.+180    	; 0x1548 <__fp_inf>
    1494:	5f c0       	rjmp	.+190    	; 0x1554 <__fp_nan>
    1496:	11 24       	eor	r1, r1
    1498:	ee cf       	rjmp	.-36     	; 0x1476 <__fp_szero>

0000149a <__mulsf3x>:
    149a:	ca df       	rcall	.-108    	; 0x1430 <__fp_split3>
    149c:	a0 f3       	brcs	.-24     	; 0x1486 <__mulsf3+0x4>

0000149e <__mulsf3_pse>:
    149e:	95 9f       	mul	r25, r21
    14a0:	d1 f3       	breq	.-12     	; 0x1496 <__mulsf3+0x14>
    14a2:	95 0f       	add	r25, r21
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	55 1f       	adc	r21, r21
    14a8:	62 9f       	mul	r22, r18
    14aa:	f0 01       	movw	r30, r0
    14ac:	72 9f       	mul	r23, r18
    14ae:	bb 27       	eor	r27, r27
    14b0:	f0 0d       	add	r31, r0
    14b2:	b1 1d       	adc	r27, r1
    14b4:	63 9f       	mul	r22, r19
    14b6:	aa 27       	eor	r26, r26
    14b8:	f0 0d       	add	r31, r0
    14ba:	b1 1d       	adc	r27, r1
    14bc:	aa 1f       	adc	r26, r26
    14be:	64 9f       	mul	r22, r20
    14c0:	66 27       	eor	r22, r22
    14c2:	b0 0d       	add	r27, r0
    14c4:	a1 1d       	adc	r26, r1
    14c6:	66 1f       	adc	r22, r22
    14c8:	82 9f       	mul	r24, r18
    14ca:	22 27       	eor	r18, r18
    14cc:	b0 0d       	add	r27, r0
    14ce:	a1 1d       	adc	r26, r1
    14d0:	62 1f       	adc	r22, r18
    14d2:	73 9f       	mul	r23, r19
    14d4:	b0 0d       	add	r27, r0
    14d6:	a1 1d       	adc	r26, r1
    14d8:	62 1f       	adc	r22, r18
    14da:	83 9f       	mul	r24, r19
    14dc:	a0 0d       	add	r26, r0
    14de:	61 1d       	adc	r22, r1
    14e0:	22 1f       	adc	r18, r18
    14e2:	74 9f       	mul	r23, r20
    14e4:	33 27       	eor	r19, r19
    14e6:	a0 0d       	add	r26, r0
    14e8:	61 1d       	adc	r22, r1
    14ea:	23 1f       	adc	r18, r19
    14ec:	84 9f       	mul	r24, r20
    14ee:	60 0d       	add	r22, r0
    14f0:	21 1d       	adc	r18, r1
    14f2:	82 2f       	mov	r24, r18
    14f4:	76 2f       	mov	r23, r22
    14f6:	6a 2f       	mov	r22, r26
    14f8:	11 24       	eor	r1, r1
    14fa:	9f 57       	subi	r25, 0x7F	; 127
    14fc:	50 40       	sbci	r21, 0x00	; 0
    14fe:	8a f0       	brmi	.+34     	; 0x1522 <__mulsf3_pse+0x84>
    1500:	e1 f0       	breq	.+56     	; 0x153a <__mulsf3_pse+0x9c>
    1502:	88 23       	and	r24, r24
    1504:	4a f0       	brmi	.+18     	; 0x1518 <__mulsf3_pse+0x7a>
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	bb 1f       	adc	r27, r27
    150c:	66 1f       	adc	r22, r22
    150e:	77 1f       	adc	r23, r23
    1510:	88 1f       	adc	r24, r24
    1512:	91 50       	subi	r25, 0x01	; 1
    1514:	50 40       	sbci	r21, 0x00	; 0
    1516:	a9 f7       	brne	.-22     	; 0x1502 <__mulsf3_pse+0x64>
    1518:	9e 3f       	cpi	r25, 0xFE	; 254
    151a:	51 05       	cpc	r21, r1
    151c:	70 f0       	brcs	.+28     	; 0x153a <__mulsf3_pse+0x9c>
    151e:	14 c0       	rjmp	.+40     	; 0x1548 <__fp_inf>
    1520:	aa cf       	rjmp	.-172    	; 0x1476 <__fp_szero>
    1522:	5f 3f       	cpi	r21, 0xFF	; 255
    1524:	ec f3       	brlt	.-6      	; 0x1520 <__mulsf3_pse+0x82>
    1526:	98 3e       	cpi	r25, 0xE8	; 232
    1528:	dc f3       	brlt	.-10     	; 0x1520 <__mulsf3_pse+0x82>
    152a:	86 95       	lsr	r24
    152c:	77 95       	ror	r23
    152e:	67 95       	ror	r22
    1530:	b7 95       	ror	r27
    1532:	f7 95       	ror	r31
    1534:	e7 95       	ror	r30
    1536:	9f 5f       	subi	r25, 0xFF	; 255
    1538:	c1 f7       	brne	.-16     	; 0x152a <__mulsf3_pse+0x8c>
    153a:	fe 2b       	or	r31, r30
    153c:	88 0f       	add	r24, r24
    153e:	91 1d       	adc	r25, r1
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	97 f9       	bld	r25, 7
    1546:	08 95       	ret

00001548 <__fp_inf>:
    1548:	97 f9       	bld	r25, 7
    154a:	9f 67       	ori	r25, 0x7F	; 127
    154c:	80 e8       	ldi	r24, 0x80	; 128
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	08 95       	ret

00001554 <__fp_nan>:
    1554:	9f ef       	ldi	r25, 0xFF	; 255
    1556:	80 ec       	ldi	r24, 0xC0	; 192
    1558:	08 95       	ret

0000155a <__fp_pscA>:
    155a:	00 24       	eor	r0, r0
    155c:	0a 94       	dec	r0
    155e:	16 16       	cp	r1, r22
    1560:	17 06       	cpc	r1, r23
    1562:	18 06       	cpc	r1, r24
    1564:	09 06       	cpc	r0, r25
    1566:	08 95       	ret

00001568 <__fp_pscB>:
    1568:	00 24       	eor	r0, r0
    156a:	0a 94       	dec	r0
    156c:	12 16       	cp	r1, r18
    156e:	13 06       	cpc	r1, r19
    1570:	14 06       	cpc	r1, r20
    1572:	05 06       	cpc	r0, r21
    1574:	08 95       	ret

00001576 <__fp_round>:
    1576:	09 2e       	mov	r0, r25
    1578:	03 94       	inc	r0
    157a:	00 0c       	add	r0, r0
    157c:	11 f4       	brne	.+4      	; 0x1582 <__fp_round+0xc>
    157e:	88 23       	and	r24, r24
    1580:	52 f0       	brmi	.+20     	; 0x1596 <__fp_round+0x20>
    1582:	bb 0f       	add	r27, r27
    1584:	40 f4       	brcc	.+16     	; 0x1596 <__fp_round+0x20>
    1586:	bf 2b       	or	r27, r31
    1588:	11 f4       	brne	.+4      	; 0x158e <__fp_round+0x18>
    158a:	60 ff       	sbrs	r22, 0
    158c:	04 c0       	rjmp	.+8      	; 0x1596 <__fp_round+0x20>
    158e:	6f 5f       	subi	r22, 0xFF	; 255
    1590:	7f 4f       	sbci	r23, 0xFF	; 255
    1592:	8f 4f       	sbci	r24, 0xFF	; 255
    1594:	9f 4f       	sbci	r25, 0xFF	; 255
    1596:	08 95       	ret

00001598 <__udivmodsi4>:
    1598:	a1 e2       	ldi	r26, 0x21	; 33
    159a:	1a 2e       	mov	r1, r26
    159c:	aa 1b       	sub	r26, r26
    159e:	bb 1b       	sub	r27, r27
    15a0:	fd 01       	movw	r30, r26
    15a2:	0d c0       	rjmp	.+26     	; 0x15be <__udivmodsi4_ep>

000015a4 <__udivmodsi4_loop>:
    15a4:	aa 1f       	adc	r26, r26
    15a6:	bb 1f       	adc	r27, r27
    15a8:	ee 1f       	adc	r30, r30
    15aa:	ff 1f       	adc	r31, r31
    15ac:	a2 17       	cp	r26, r18
    15ae:	b3 07       	cpc	r27, r19
    15b0:	e4 07       	cpc	r30, r20
    15b2:	f5 07       	cpc	r31, r21
    15b4:	20 f0       	brcs	.+8      	; 0x15be <__udivmodsi4_ep>
    15b6:	a2 1b       	sub	r26, r18
    15b8:	b3 0b       	sbc	r27, r19
    15ba:	e4 0b       	sbc	r30, r20
    15bc:	f5 0b       	sbc	r31, r21

000015be <__udivmodsi4_ep>:
    15be:	66 1f       	adc	r22, r22
    15c0:	77 1f       	adc	r23, r23
    15c2:	88 1f       	adc	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	1a 94       	dec	r1
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <__udivmodsi4_loop>
    15ca:	60 95       	com	r22
    15cc:	70 95       	com	r23
    15ce:	80 95       	com	r24
    15d0:	90 95       	com	r25
    15d2:	9b 01       	movw	r18, r22
    15d4:	ac 01       	movw	r20, r24
    15d6:	bd 01       	movw	r22, r26
    15d8:	cf 01       	movw	r24, r30
    15da:	08 95       	ret

000015dc <__muluhisi3>:
    15dc:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <__umulhisi3>
    15e0:	a5 9f       	mul	r26, r21
    15e2:	90 0d       	add	r25, r0
    15e4:	b4 9f       	mul	r27, r20
    15e6:	90 0d       	add	r25, r0
    15e8:	a4 9f       	mul	r26, r20
    15ea:	80 0d       	add	r24, r0
    15ec:	91 1d       	adc	r25, r1
    15ee:	11 24       	eor	r1, r1
    15f0:	08 95       	ret

000015f2 <__umulhisi3>:
    15f2:	a2 9f       	mul	r26, r18
    15f4:	b0 01       	movw	r22, r0
    15f6:	b3 9f       	mul	r27, r19
    15f8:	c0 01       	movw	r24, r0
    15fa:	a3 9f       	mul	r26, r19
    15fc:	70 0d       	add	r23, r0
    15fe:	81 1d       	adc	r24, r1
    1600:	11 24       	eor	r1, r1
    1602:	91 1d       	adc	r25, r1
    1604:	b2 9f       	mul	r27, r18
    1606:	70 0d       	add	r23, r0
    1608:	81 1d       	adc	r24, r1
    160a:	11 24       	eor	r1, r1
    160c:	91 1d       	adc	r25, r1
    160e:	08 95       	ret

00001610 <__eerd_byte_m328p>:
    1610:	f9 99       	sbic	0x1f, 1	; 31
    1612:	fe cf       	rjmp	.-4      	; 0x1610 <__eerd_byte_m328p>
    1614:	92 bd       	out	0x22, r25	; 34
    1616:	81 bd       	out	0x21, r24	; 33
    1618:	f8 9a       	sbi	0x1f, 0	; 31
    161a:	99 27       	eor	r25, r25
    161c:	80 b5       	in	r24, 0x20	; 32
    161e:	08 95       	ret

00001620 <__eerd_word_m328p>:
    1620:	a8 e1       	ldi	r26, 0x18	; 24
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	42 e0       	ldi	r20, 0x02	; 2
    1626:	50 e0       	ldi	r21, 0x00	; 0
    1628:	0c 94 33 0b 	jmp	0x1666	; 0x1666 <__eerd_blraw_m328p>

0000162c <__eewr_byte_m328p>:
    162c:	26 2f       	mov	r18, r22

0000162e <__eewr_r18_m328p>:
    162e:	f9 99       	sbic	0x1f, 1	; 31
    1630:	fe cf       	rjmp	.-4      	; 0x162e <__eewr_r18_m328p>
    1632:	1f ba       	out	0x1f, r1	; 31
    1634:	92 bd       	out	0x22, r25	; 34
    1636:	81 bd       	out	0x21, r24	; 33
    1638:	20 bd       	out	0x20, r18	; 32
    163a:	0f b6       	in	r0, 0x3f	; 63
    163c:	f8 94       	cli
    163e:	fa 9a       	sbi	0x1f, 2	; 31
    1640:	f9 9a       	sbi	0x1f, 1	; 31
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	01 96       	adiw	r24, 0x01	; 1
    1646:	08 95       	ret

00001648 <__eewr_dword_m328p>:
    1648:	24 2f       	mov	r18, r20
    164a:	0e 94 17 0b 	call	0x162e	; 0x162e <__eewr_r18_m328p>
    164e:	25 2f       	mov	r18, r21
    1650:	0e 94 17 0b 	call	0x162e	; 0x162e <__eewr_r18_m328p>
    1654:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__eewr_word_m328p>

00001658 <__eewr_word_m328p>:
    1658:	0e 94 16 0b 	call	0x162c	; 0x162c <__eewr_byte_m328p>
    165c:	27 2f       	mov	r18, r23
    165e:	0c 94 17 0b 	jmp	0x162e	; 0x162e <__eewr_r18_m328p>

00001662 <__eerd_block_m328p>:
    1662:	dc 01       	movw	r26, r24
    1664:	cb 01       	movw	r24, r22

00001666 <__eerd_blraw_m328p>:
    1666:	fc 01       	movw	r30, r24
    1668:	f9 99       	sbic	0x1f, 1	; 31
    166a:	fe cf       	rjmp	.-4      	; 0x1668 <__eerd_blraw_m328p+0x2>
    166c:	06 c0       	rjmp	.+12     	; 0x167a <__eerd_blraw_m328p+0x14>
    166e:	f2 bd       	out	0x22, r31	; 34
    1670:	e1 bd       	out	0x21, r30	; 33
    1672:	f8 9a       	sbi	0x1f, 0	; 31
    1674:	31 96       	adiw	r30, 0x01	; 1
    1676:	00 b4       	in	r0, 0x20	; 32
    1678:	0d 92       	st	X+, r0
    167a:	41 50       	subi	r20, 0x01	; 1
    167c:	50 40       	sbci	r21, 0x00	; 0
    167e:	b8 f7       	brcc	.-18     	; 0x166e <__eerd_blraw_m328p+0x8>
    1680:	08 95       	ret

00001682 <_exit>:
    1682:	f8 94       	cli

00001684 <__stop_program>:
    1684:	ff cf       	rjmp	.-2      	; 0x1684 <__stop_program>
